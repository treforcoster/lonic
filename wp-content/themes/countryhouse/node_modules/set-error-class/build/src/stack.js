import{setNonEnumProp}from"./enum.js";



export const updateStack=function(error,currentName){
if(!shouldUpdateStack(error,currentName)){
return;
}

const stack=getStack(error,currentName);
setNonEnumProp(error,"stack",stack);
};

const shouldUpdateStack=function(error,currentName){
return(
currentName!==error.name&&
currentName!==""&&
error.stack.includes(currentName)&&
stackIncludesName());

};


const stackIncludesName=function(){

class StackError extends Error{}
const descriptor={
value:EXAMPLE_NAME,
enumerable:false,
writable:true,
configurable:true
};

Object.defineProperty(StackError,"name",descriptor);

Object.defineProperty(StackError.prototype,"name",descriptor);
const{stack}=new StackError("");
return typeof stack==="string"&&stack.includes(EXAMPLE_NAME);
};

const EXAMPLE_NAME="SetErrorClassError";








const getStack=function({name,stack},currentName){
if(stack.startsWith(`${currentName}: `)){
return stack.replace(currentName,name);
}

const replacers=getReplacers(currentName,name);
const[fromA,to]=replacers.find(([from])=>stack.includes(from));
return stack.replace(fromA,to);
};



const getReplacers=function(currentName,newName){
return[
[`\n${currentName}: `,`\n${newName}: `],
[`${currentName}: `,`${newName}: `],
[`${currentName} `,`${newName} `],
[currentName,newName]];

};
//# sourceMappingURL=stack.js.map