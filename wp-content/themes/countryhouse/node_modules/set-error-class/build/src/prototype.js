import{setNonEnumProp}from"./enum.js";


export const updatePrototype=function(error,ErrorClass){
if(Object.getPrototypeOf(error)===ErrorClass.prototype){
return;
}

setPrototype(error,ErrorClass);
deleteOwnProperty(error,"constructor");
fixName(error,ErrorClass);
};





const setPrototype=function(error,ErrorClass){

Object.setPrototypeOf(error,ErrorClass.prototype);
};










const fixName=function(error,ErrorClass){
deleteOwnProperty(error,"name");

const prototypeName=getClassName(ErrorClass.prototype);

if(error.name!==prototypeName){
setNonEnumProp(error,"name",prototypeName);
}
};

const getClassName=function(prototype){
return(
getPrototypeName(prototype)??
getConstructorName(prototype)??
getClassName(Object.getPrototypeOf(prototype)));

};

const getPrototypeName=function(prototype){
return isOwn.call(prototype,"name")&&isDefinedString(prototype.name)?
prototype.name:
undefined;
};

const getConstructorName=function(prototype){
return typeof prototype.constructor==="function"&&
isDefinedString(prototype.constructor.name)?
prototype.constructor.name:
undefined;
};

const isDefinedString=function(value){
return typeof value==="string"&&value!=="";
};



const deleteOwnProperty=function(error,propName){
if(isOwn.call(error,propName)){

delete error[propName];
}
};

const{hasOwnProperty:isOwn}=Object.prototype;
//# sourceMappingURL=prototype.js.map