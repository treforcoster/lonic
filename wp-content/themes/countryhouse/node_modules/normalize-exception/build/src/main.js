import{normalizeAggregate}from"./aggregate.js";
import{normalizeCause}from"./cause.js";
import{createError}from"./create/main.js";
import{setErrorProperty,normalizeDescriptors}from"./descriptors.js";
import{setStack}from"./stack.js";


export default function normalizeException(error,{shallow=false}={}){
return recurseException(error,[],shallow);
}

const recurseException=function(error,parents,shallow){
if(parents.includes(error)){
return;
}

const recurse=shallow?
identity:
(innerError)=>recurseException(innerError,[...parents,error],shallow);

const errorA=createError(error);
normalizeProps(errorA,recurse);
return errorA;
};

const identity=function(error){
return error;
};

const normalizeProps=function(error,recurse){
normalizeName(error);
normalizeMessage(error);
normalizeStack(error);
normalizeCause(error,recurse);
normalizeAggregate(error,recurse);
normalizeDescriptors(error);
};






const normalizeName=function(error){
if(isDefinedString(error.name)){
return;
}

const prototypeName=Object.getPrototypeOf(error).name;
const name=isDefinedString(prototypeName)?
prototypeName:
error.constructor.name;
setErrorProperty(error,"name",name);
};


const normalizeMessage=function(error){
if(!isDefinedString(error.message)){
setErrorProperty(error,"message","");
}
};


const normalizeStack=function(error){
if(!isDefinedString(error.stack)){
setStack(error);
}
};

const isDefinedString=function(value){
return typeof value==="string"&&value!=="";
};
//# sourceMappingURL=main.js.map