import{setErrorProperty}from"./descriptors.js";






export const normalizeAggregate=function(error,recurse){
if(Array.isArray(error.errors)){
const aggregateErrors=error.errors.
filter(isDefined).
map(recurse).
filter(Boolean);
setErrorProperty(error,"errors",aggregateErrors);
}else if(isAggregateError(error)){
setErrorProperty(error,"errors",[]);
}else if(error.errors!==undefined){
deleteAggregateErrors(error);
}
};

const isDefined=function(error){
return error!==undefined;
};

const isAggregateError=function(error){
return(
"AggregateError"in globalThis&&(
error.name==="AggregateError"||error instanceof AggregateError));

};

const deleteAggregateErrors=function(error){

delete error.errors;

if(error.errors!==undefined){
setErrorProperty(error,"errors",[]);
}
};
//# sourceMappingURL=aggregate.js.map