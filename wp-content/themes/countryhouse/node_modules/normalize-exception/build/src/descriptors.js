
export const normalizeDescriptors=function(error){
CORE_ERROR_PROPS.forEach((propName)=>{
normalizeDescriptor(error,propName);
});
};

export const CORE_ERROR_PROPS=["name","message","stack","cause","errors"];

const normalizeDescriptor=function(error,propName){
const descriptor=getDescriptor(error,propName);

if(descriptor===undefined){
return;
}

if(isReadonlyGetter(descriptor)){
setErrorProperty(error,propName,error[propName]);
return;
}

if(isInvalidDescriptor(descriptor)){
setErrorDescriptor(error,propName,descriptor);
}
};


export const getDescriptor=function(value,propName){
const descriptor=Object.getOwnPropertyDescriptor(value,propName);

if(descriptor!==undefined){
return descriptor;
}

const prototype=Object.getPrototypeOf(value);
return prototype===null?undefined:getDescriptor(prototype,propName);
};


const isReadonlyGetter=function({get,set}){
return get!==undefined&&set===undefined;
};

const isInvalidDescriptor=function({enumerable,writable}){
return enumerable||!writable;
};


export const setErrorProperty=function(error,propName,value){
setErrorDescriptor(error,propName,{value});
};


const setErrorDescriptor=function(error,propName,descriptor){

Object.defineProperty(error,propName,{
...descriptor,
...("get"in descriptor||"set"in descriptor?{}:{writable:true}),
enumerable:false,
configurable:true});

};
//# sourceMappingURL=descriptors.js.map