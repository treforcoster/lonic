import{isSubclass}from"../utils/subclass.js";


export const checkCustom=(custom,ParentError)=>{
if(typeof custom!=="function"){
throw new TypeError(
`The "custom" class of "${ParentError.name}.subclass()" must be a class: ${custom}`);

}

checkParent(custom,ParentError);
checkPrototype(custom,ParentError);
};









const checkParent=(custom,ParentError)=>{
if(custom===ParentError){
throw new TypeError(
`The "custom" class of "${ParentError.name}.subclass()" must extend from ${ParentError.name}, but not be ${ParentError.name} itself.`);

}

if(!isSubclass(custom,ParentError)){
throw new TypeError(
`The "custom" class of "${ParentError.name}.subclass()" must extend from ${ParentError.name}.`);

}

if(Object.getPrototypeOf(custom)!==ParentError){
throw new TypeError(
`The "custom" class of "${ParentError.name}.subclass()" must extend directly from ${ParentError.name}.`);

}
};

const checkPrototype=(custom,ParentError)=>{
if(typeof custom.prototype!=="object"||custom.prototype===null){
throw new TypeError(
`The "custom" class's prototype of "${ParentError.name}.subclass()" is invalid: ${custom.prototype}`);

}

if(custom.prototype.constructor!==custom){
throw new TypeError(
`The "custom" class of "${ParentError.name}.subclass()" has an invalid "constructor" property.`);

}
};
//# sourceMappingURL=check.js.map