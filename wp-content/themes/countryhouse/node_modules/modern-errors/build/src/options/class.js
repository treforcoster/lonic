import isPlainObj from"is-plain-obj";

import{validatePluginsOptsNames}from"../plugins/shape/name.js";

import{deepClone}from"./clone.js";
import{getPluginOpts}from"./get.js";
import{mergePluginsOpts}from"./merge.js";


export const normalizeClassOpts=(ParentError,classOpts={})=>{
if(!isPlainObj(classOpts)){
throw new TypeError(
`The second argument of "${ParentError.name}.subclass()" must be a plain object, not: ${classOpts}`);

}

return classOpts;
};











export const getClassOpts=(parentOpts,classOpts,plugins)=>{
validatePluginsOptsNames(classOpts,plugins);
const classOptsA=mergePluginsOpts(parentOpts,classOpts,plugins);
const classOptsB=deepClone(classOptsA);
plugins.forEach((plugin)=>{
getPluginOpts({pluginsOpts:classOptsB,plugin,full:false});
});
return classOptsB;
};
//# sourceMappingURL=class.js.map