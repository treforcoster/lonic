import{mergePluginsOpts}from"./merge.js";





export const normalizeIsOptions=({
plugin,
plugin:{getOptions,isOptions=()=>getOptions!==undefined}
})=>({...plugin,isOptions});




















export const getMethodOpts=(args,plugin)=>{
if(args.length===0){
return{args};
}

const lastArg=args[args.length-1];
return lastArgIsOptions(plugin,lastArg)?
{args:args.slice(0,-1),methodOpts:{[plugin.name]:lastArg}}:
{args};
};

const lastArgIsOptions=({isOptions,fullName},lastArg)=>{
const isOptionsResult=isOptions(lastArg);

if(typeof isOptionsResult!=="boolean"){
throw new TypeError(
`The plugin "${fullName}"'s "isOptions()" method must return a boolean, not: ${typeof isOptionsResult}`);

}

return isOptionsResult;
};

export const mergeMethodOpts=(pluginsOpts,methodOpts,plugins)=>
methodOpts===undefined?
pluginsOpts:
mergePluginsOpts(pluginsOpts,methodOpts,plugins);
//# sourceMappingURL=method.js.map