import { Option } from '@roots/bud/cli/commands/bud';
import BuildCommand from '@roots/bud/cli/commands/bud.build';
/**
 * `bud build development` command
 */
export default class BuildDevelopmentCommand extends BuildCommand {
    constructor() {
        super(...arguments);
        this.hot = Option.Boolean(`--hot`, undefined, {
            description: `Enable hot module replacement`,
        });
        this.port = Option.String(`--port`, undefined, {
            description: `Port to serve on`,
        });
        this.proxy = Option.String(`--proxy`, undefined, {
            description: `Proxy request URL`,
        });
        this.reload = Option.Boolean(`--reload`, undefined, {
            description: `Reload browser on unrecoverable errors`,
        });
        this.overlay = Option.Boolean(`--overlay`, undefined, {
            description: `Display error overlay in the browser`,
        });
        this.indicator = Option.Boolean(`--indicator`, undefined, {
            description: `Display status in the browser`,
        });
        this.browser = Option.String(`--browser`, undefined, {
            description: `Open browser on successful development build.`,
            tolerateBoolean: true,
        });
        this.withSubcommandContext = async (context) => {
            return {
                ...context,
                mode: `development`,
            };
        };
        this.withSubcommandArguments = async (args) => {
            return {
                ...args,
                browser: this.browser,
                hot: this.hot,
                indicator: this.indicator,
                overlay: this.overlay,
                port: this.port,
                proxy: this.proxy,
                reload: this.reload,
            };
        };
    }
}
BuildDevelopmentCommand.paths = [
    [`build`, `development`],
    [`dev`],
    [`development`],
];
BuildDevelopmentCommand.usage = BuildCommand.Usage({
    category: `build`,
    description: `Compiles source assets in \`development\` mode.`,
    details: `\
      \`bud build development\` compiles source assets in \`development\` mode.
    `,
    examples: [
        [`compile source and serve`, `$0 build development`],
        [
            `open project in system default browser`,
            `$0 build development --browser`,
        ],
        [
            `do not force reload in the browser when encountering a fatal HMR error`,
            `$0 build development --no-reload`,
        ],
        [
            `do not display an error overlay when encountering errors in application code`,
            `$0 build development --no-overlay`,
        ],
    ],
});
//# sourceMappingURL=bud.build.development.js.map