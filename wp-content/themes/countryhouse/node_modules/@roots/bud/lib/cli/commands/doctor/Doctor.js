import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable react/no-unescaped-entities */
import { Error } from '@roots/bud-dashboard/app';
import { BudError } from '@roots/bud-support/errors';
import figures from '@roots/bud-support/figures';
import * as Ink from 'ink';
import { isWindows } from '../../helpers/isWindows.js';
export const Doctor = ({ name, timings }) => {
    return (_jsxs(Ink.Box, { flexDirection: "column", marginTop: 1, children: [_jsx(Ink.Text, { underline: true, children: `Diagnosis for ${name}\n` }), _jsxs(Ink.Text, { dimColor: true, children: ["Completed a dry run of your project's build (executed in", ` `, timings.build, " seconds). If the information provided by this command doesn't yield a solution consider running `yarn bud repl` and exploring the finalized config (`bud.build.config`)."] }), _jsx(Process, {})] }));
};
const Process = () => {
    return (_jsxs(Ink.Box, { marginTop: 1, flexDirection: "column", children: [_jsxs(Ink.Text, { color: "blue", children: ["Checking system requirements", `\n`] }), _jsxs(Ink.Box, { flexDirection: "column", children: [_jsxs(Ink.Text, { children: [process.version.match(/v1[6|7|8|9]/)
                                ? figures.tick
                                : figures.cross, ` `, "node: ", process.version] }), _jsxs(Ink.Text, { children: [isWindows() ? figures.cross : figures.tick, " os:", ` `, process.platform] }), !process.version.match(/v1[6|7|8|9]/) && (_jsx(Error, { error: new BudError(`node-version`, {
                            props: {
                                details: `Please upgrade to Node v18 for long-term support. You are running node ${process.version}.`,
                                docs: new URL(`https://bud.js.org/guides/getting-started`),
                            },
                        }) }))] })] }));
};
//# sourceMappingURL=Doctor.js.map