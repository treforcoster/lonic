import { __decorate, __metadata } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import { dry } from '@roots/bud/cli/decorators';
import { bind } from '@roots/bud-framework/extension/decorators';
import { Command, Option } from '@roots/bud-support/clipanion';
import BudCommand from '../bud.js';
/**
 * bud repl command
 */
let BudReplCommand = class BudReplCommand extends BudCommand {
    constructor() {
        super(...arguments);
        /**
         * `--color`
         */
        this.color = Option.Boolean(`--color,-c`, true, {
            description: `use syntax highlighting`,
        });
        /**
         * `--indent`
         */
        this.indent = Option.String(`--indent,-i`, `1`, {
            description: `indentation level`,
            tolerateBoolean: false,
        });
        /**
         * `--depth`
         */
        this.depth = Option.String(`--depth,-d`, `1`, {
            description: `recursion depth`,
            tolerateBoolean: false,
        });
    }
    /**
     * Execute command
     */
    async execute() {
        await this.makeBud(this);
        await this.bud.run();
        const { Repl } = await import(`./Repl.js`);
        this.render(_jsx(Repl, { app: this.bud, indent: this.indent, depth: this.depth }));
    }
};
/**
 * Command paths
 */
BudReplCommand.paths = [[`repl`]];
/**
 * Command usage
 */
BudReplCommand.usage = Command.Usage({
    description: `Use bud in a repl`,
    examples: [[`repl`, `$0 repl`]],
});
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BudReplCommand.prototype, "execute", null);
BudReplCommand = __decorate([
    dry
], BudReplCommand);
export default BudReplCommand;
//# sourceMappingURL=index.js.map