import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { isInternalDevelopmentEnv } from '@roots/bud/cli/helpers/isInternalDevelopmentEnv';
import * as Ink from 'ink';
export const checkDependencies = async (bud) => {
    if (isInternalDevelopmentEnv(bud))
        return false;
    const mismatches = Object.entries({
        ...(bud.context.manifest?.dependencies ?? {}),
        ...(bud.context.manifest?.devDependencies ?? {}),
    })
        .filter(([name]) => name.startsWith(`@roots/`))
        .filter(([signifier, version]) => {
        version = version.replace(`^`, ``);
        return (version !== `latest` &&
            version !== `nightly` &&
            !version.includes(`workspace:`) &&
            version !== bud.context.bud.version);
    });
    mismatches?.length &&
        Ink.render(_jsx(Ink.Box, { flexDirection: "column", marginY: 1, children: mismatches.map(([k, v], key) => {
                return (_jsxs(Ink.Box, { flexDirection: "row", children: [_jsx(Ink.Box, { children: _jsx(Ink.Text, { color: "red", children: k }) }), _jsx(Ink.Box, { flexDirection: "column", paddingLeft: 1, children: _jsxs(Ink.Text, { children: ["Installed version ", _jsxs(Ink.Text, { color: "blue", children: ["(", v, ")"] }), ` `, "does not match bud.js version", ` `, _jsxs(Ink.Text, { color: "blue", children: ["(", bud.context.bud.version, ")"] })] }) })] }, key));
            }) }));
    return mismatches?.length;
};
//# sourceMappingURL=checkDependencies.js.map