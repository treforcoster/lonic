import { __decorate, __metadata } from "tslib";
import BudCommand, { ArgsModifier } from '@roots/bud/cli/commands/bud';
import { dry } from '@roots/bud/cli/decorators/command.dry';
import { Command, Option } from '@roots/bud-support/clipanion';
import { bind } from '@roots/bud-support/decorators';
import { detectPackageManager } from '../helpers/detectPackageManager.js';
import { isInternalDevelopmentEnv } from '../helpers/isInternalDevelopmentEnv.js';
/**
 * `bud upgrade` command
 */
let BudUpgradeCommand = class BudUpgradeCommand extends BudCommand {
    constructor() {
        super(...arguments);
        this.withArguments = ArgsModifier({ dry: true });
        this.version = Option.String({ required: false });
        this.registry = Option.String(`--registry`, undefined, {
            description: `custom registry`,
        });
    }
    get pacman() {
        const pacman = detectPackageManager(this.bud);
        if (pacman === false)
            throw new Error(`Package manager is ambiguous`);
        return pacman;
    }
    get command() {
        return this.pacman === `npm` ? `install` : `add`;
    }
    async execute() {
        await this.makeBud(this);
        await this.healthcheck(this);
        await this.bud.run();
        if (isInternalDevelopmentEnv(this.bud)) {
            throw new Error(`Internal development environment`);
        }
        if (!this.version) {
            const get = await import(`@roots/bud-support/axios`).then(({ default: axios }) => axios.get);
            this.version = await get(`https://registry.npmjs.org/@roots/bud/latest`).then(async (res) => res.data?.version);
        }
        if (this.hasUpgradeableDependencies(`devDependencies`)) {
            await this.$(this.pacman, [
                this.command,
                ...this.getUpgradeableDependencies(`devDependencies`),
                ...this.getFlags(`devDependencies`),
            ]);
        }
        if (this.hasUpgradeableDependencies(`dependencies`)) {
            await this.$(this.pacman, [
                this.command,
                ...this.getUpgradeableDependencies(`dependencies`),
                ...this.getFlags(`dependencies`),
            ]);
        }
    }
    getUpgradeableDependencies(type) {
        const onlyBud = (pkg) => pkg.startsWith(`@roots/`) || pkg.includes(`bud-`);
        const toScope = (pkg) => `${pkg}@${this.version}`;
        return this.getAllDependenciesOfType(type)
            .filter(onlyBud)
            .map(toScope)
            .filter(Boolean);
    }
    getAllDependenciesOfType(type) {
        if (this.bud?.context.manifest?.[type]) {
            return Object.keys(this.bud.context.manifest[type]);
        }
        return [];
    }
    hasUpgradeableDependencies(type) {
        return this.getUpgradeableDependencies(type)?.length > 0;
    }
    getFlags(type) {
        const flags = [];
        if (type === `devDependencies`) {
            switch (this.pacman) {
                case `npm`:
                    flags.push(`--save-dev`);
                    break;
                case `yarn`:
                    flags.push(`--dev`);
                    break;
            }
        }
        if (type === `dependencies` && this.pacman === `npm`) {
            flags.push(`--save`);
        }
        if (this.registry)
            flags.push(`--registry`, this.registry);
        return flags;
    }
};
BudUpgradeCommand.paths = [[`upgrade`], [`version`, `set`]];
BudUpgradeCommand.usage = Command.Usage({
    description: `Set bud.js version`,
    details: `
      This command will upgrade your bud.js installation to the latest stable version.

      It will upgrade any package that is prefixed with \`@roots/\` or \`bud-\`.

      If a version is specified, the command will upgrade to that version.

      If a private registry is specified, the command will upgrade through that registry.

      This command is a passthrough to the package manager you are using.
    `,
    category: `tasks`,
    examples: [
        [`Upgrade dependencies to latest`, `$0 upgrade`],
        [`Upgrade dependencies to specific version`, `$0 upgrade 6.6.6`],
        [
            `Upgrade through a private registry`,
            `$0 upgrade --registry http://localhost:4873`,
        ],
    ],
});
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Array)
], BudUpgradeCommand.prototype, "getUpgradeableDependencies", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Array)
], BudUpgradeCommand.prototype, "getAllDependenciesOfType", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Boolean)
], BudUpgradeCommand.prototype, "hasUpgradeableDependencies", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], BudUpgradeCommand.prototype, "getFlags", null);
BudUpgradeCommand = __decorate([
    dry
], BudUpgradeCommand);
export default BudUpgradeCommand;
//# sourceMappingURL=bud.upgrade.js.map