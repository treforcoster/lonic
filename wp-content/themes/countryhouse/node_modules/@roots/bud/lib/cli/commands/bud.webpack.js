import { __decorate } from "tslib";
import { join } from 'node:path';
import BudCommand from '@roots/bud/cli/commands/bud';
import { dry } from '@roots/bud/cli/decorators/command.dry';
import { Command, Option } from '@roots/bud-support/clipanion';
/**
 * `bud webpack` command
 */
let BudWebpackCommand = class BudWebpackCommand extends BudCommand {
    constructor() {
        super(...arguments);
        this.options = Option.Proxy({ name: `webpack passthrough options` });
    }
    /**
     * Command execute
     */
    async execute() {
        await this.makeBud(this);
        await this.bud.run();
        const bin = join(await this.bud.module.getDirectory(`webpack`), `bin`, `webpack.js`);
        process.stdout.write(`\n\n$ ${this.bin} ${bin}\n\n`);
        await this.$(this.bin, [
            bin,
            ...this.options.filter(key => key !== `--log`),
        ]);
    }
};
BudWebpackCommand.paths = [[`webpack`]];
BudWebpackCommand.usage = Command.Usage({
    description: `Webpack CLI passthrough`,
    category: `tools`,
    examples: [[`View webpack usage information`, `$0 webpack --help`]],
});
BudWebpackCommand = __decorate([
    dry
], BudWebpackCommand);
export default BudWebpackCommand;
//# sourceMappingURL=bud.webpack.js.map