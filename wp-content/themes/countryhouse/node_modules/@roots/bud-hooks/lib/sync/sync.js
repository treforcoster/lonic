var _a, _b;
import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import isFunction from '@roots/bud-support/lodash/isFunction';
import { Hooks } from '../base/base.js';
/**
 * Synchronous hooks registry
 */
export class SyncHooks extends Hooks {
    /**
     * Set a value
     */
    set(id, ...input) {
        if (!this.has(id))
            this.store[id] = [];
        input.map(this.app.value.make).map((value) => {
            if (typeof value.get() === `function`)
                this.store[id].push(value);
            else
                this.store[id] = [value];
        });
        return this.app;
    }
    /**
     * Set multiple values
     */
    setRecords(map) {
        Object.entries(map).map(([k, v]) => this.set(k, v));
        return this.app;
    }
    /**
     * Get a value
     */
    get(id, fallback) {
        return [this.app.value.make(fallback), ...(this.store[id] ?? [])]
            .map(this.app.value.get)
            .reduce((accumulated, current) => isFunction(current) ? current(accumulated) : current);
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_a = typeof T !== "undefined" && T) === "function" ? _a : Object, Object]),
    __metadata("design:returntype", Function)
], SyncHooks.prototype, "set", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Function)
], SyncHooks.prototype, "setRecords", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof T !== "undefined" && T) === "function" ? _b : Object, Object]),
    __metadata("design:returntype", void 0)
], SyncHooks.prototype, "get", null);
//# sourceMappingURL=sync.js.map