import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, label, } from '@roots/bud-framework/extension/decorators';
import * as tailwindAdapter from './tailwind/index.js';
/**
 * Acorn v2 public path fix
 */
let TailwindThemeJSON = class TailwindThemeJSON extends Extension {
    /**
     * `register` callback
     */
    async register(bud) {
        if (!(`wpjson` in bud))
            return;
        bud.wpjson.useTailwindColors = this.useTailwindColors.bind(bud.wpjson);
        bud.wpjson.useTailwindFontFamily = this.useTailwindFontFamily.bind(bud.wpjson);
        bud.wpjson.useTailwindFontSize = this.useTailwindFontSize.bind(bud.wpjson);
    }
    useTailwindColors(extendOnly) {
        this.set(`settings`, {
            ...(this.get(`settings`) ?? {}),
            color: {
                ...(this.get(`settings.color`) ?? {}),
                palette: tailwindAdapter.palette.transform(this.app.tailwind.resolveThemeValue(`colors`, extendOnly)),
            },
        });
        return this.enable();
    }
    useTailwindFontFamily(extendOnly) {
        this.set(`settings`, {
            ...(this.get(`settings`) ?? {}),
            typography: {
                ...(this.get(`settings.typography`) ?? {}),
                fontFamilies: tailwindAdapter.fontFamily.transform(Object.assign({}, {
                    ...this.app.tailwind.resolveThemeValue(`fontFamily`, extendOnly),
                })),
            },
        });
        return this.enable();
    }
    useTailwindFontSize(extendOnly) {
        this.set(`settings`, {
            ...(this.get(`settings`) ?? {}),
            typography: {
                ...(this.get(`settings.typography`) ?? {}),
                fontSizes: tailwindAdapter.fontSize.transform(Object.assign({}, {
                    ...this.app.tailwind.resolveThemeValue(`fontSize`, extendOnly),
                })),
            },
        });
        return this.enable();
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], TailwindThemeJSON.prototype, "register", null);
TailwindThemeJSON = __decorate([
    label(`@roots/bud-tailwindcss-theme-json`),
    dependsOn([`@roots/bud-wordpress-theme-json`])
], TailwindThemeJSON);
export { TailwindThemeJSON };
//# sourceMappingURL=extension.js.map