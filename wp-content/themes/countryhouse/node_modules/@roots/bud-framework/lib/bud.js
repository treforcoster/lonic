import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import { InputError } from '@roots/bud-support/errors';
import isNull from '@roots/bud-support/lodash/isNull';
import isString from '@roots/bud-support/lodash/isString';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
import { bootstrap } from './lifecycle/bootstrap.js';
import Value from './value.js';
/**
 * Bud core class
 */
export class Bud {
    constructor() {
        this.services = [];
        /**
         * Value helper
         */
        this.value = Value;
    }
    /**
     * Compilation mode
     *
     * @remarks
     * Either `production` or `development`.
     *
     * @readonly
     * @defaultValue `production`
     */
    get mode() {
        return this.context.mode ?? `production`;
    }
    /**
     * Label
     * @readonly
     */
    get label() {
        return this.context.label;
    }
    /**
     * Parent {@link Bud} instance
     * @readonly
     */
    get root() {
        return this.context.root ?? this;
    }
    /**
     * True when {@link Bud.mode} is `production`
     * @readonly
     */
    get isProduction() {
        return this.mode == `production`;
    }
    /**
     * True when {@link Bud.mode} is `development`
     * @readonly
     */
    get isDevelopment() {
        return this.mode == `development`;
    }
    /**
     * True when current instance is the parent instance
     * @readonly
     */
    get isRoot() {
        return this.root.label === this.label;
    }
    /**
     * True when current instance is a child instance
     * @readonly
     */
    get isChild() {
        return this.root.label !== this.label;
    }
    /**
     * True when current instance has context set by CLI
     */
    isCLI() {
        return `args` in this.context;
    }
    /**
     * True when child compilers
     * @readonly
     */
    get hasChildren() {
        return (!isUndefined(this.children) &&
            !isNull(this.children) &&
            Object.entries(this.children).length > 0);
    }
    /**
     * Creates a child with `bud.create` but returns the parent instance
     */
    async make(request, tap) {
        if (!this.isRoot) {
            throw new InputError(`bud.make: must be called from the root context`);
        }
        const context = isString(request)
            ? { ...this.context, label: request, root: this }
            : { ...this.context, ...request, root: this };
        if (this.isCLI() &&
            !isUndefined(this.context.args.filter) &&
            !this.context.args.filter.includes(context.label)) {
            this.log(`skipping child instance based on --filter flag:`, context.label);
            return this;
        }
        if (this.children && this.children[context.label]) {
            this.log(`returning requested child instance:`, context.label);
            return this.get(context.label);
        }
        this.log(`instantiating new bud instance`);
        const child = await new this.implementation().lifecycle(context);
        if (!this.children)
            this.children = { [context.label]: child };
        else
            this.children[context.label] = child;
        this.get(context.label).hooks.on(`build.dependencies`, typeof request !== `string` && request.dependsOn
            ? request.dependsOn
            : Object.values(this.children)
                .map(({ label }) => label)
                .filter(label => label !== context.label));
        if (tap)
            await tap(this.get(context.label));
        await this.get(context.label)?.api.processQueue();
        return this;
    }
    async lifecycle(context) {
        await bootstrap.bind(this)({ ...context });
        return this;
    }
    /**
     * Log a message
     */
    log(...messages) {
        this.context.logger.scope(this.label).log(...messages);
        return this;
    }
    /**
     * Log an `info` level message
     */
    info(...messages) {
        this.context.logger.scope(this.label).info(...messages);
        return this;
    }
    /**
     * Log a `success` level message
     */
    success(...messages) {
        this.context.logger.scope(this.label).success(...messages);
        return this;
    }
    /**
     * Log a `warning` level message
     */
    warn(...messages) {
        this.context.logger.scope(this.label).warn(...messages);
        return this;
    }
    /**
     * Log an error
     */
    error(...messages) {
        this.context.logger.scope(this.label).error(...messages);
        return this;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", Promise)
], Bud.prototype, "make", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Bud.prototype, "lifecycle", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "log", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "info", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "success", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "warn", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Bud)
], Bud.prototype, "error", null);
//# sourceMappingURL=bud.js.map