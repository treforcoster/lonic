/// <reference types="node" resolution-mode="require"/>
import type { Bud } from './bud.js';
import { Service } from './service.js';
/**
 * Module resolver
 */
export declare class Module extends Service {
    /**
     * Node require
     */
    require: NodeRequire;
    /**
     * Resolved module cache
     */
    resolved: Record<string, string>;
    /**
     * Cache location
     */
    get cacheLocation(): string;
    /**
     * Cache enabled
     */
    cacheEnabled(): boolean;
    /**
     * Cache exists
     */
    cacheValid: boolean;
    /**
     * Class constructor
     */
    constructor(args: () => Bud);
    /**
     * {@link Service.init}
     */
    init(bud: Bud): Promise<void>;
    /**
     * Get `package.json` absolute path from a module signifier
     */
    getDirectory(signifier: string, context?: string): Promise<string>;
    /**
     * Get `package.json` absolute path from a module signifier
     */
    getManifestPath(pkgName: string): Promise<string>;
    /**
     * Read `package.json` manifest from a module signifier
     */
    readManifest(signifier: string): Promise<any>;
    /**
     * Resolve a module path from its signifier
     */
    resolve(signifier: string, context?: string): Promise<string>;
    /**
     * Import a module from its signifier
     */
    import<T = any>(signifier: string, context: string): Promise<T>;
    /**
     * Import a module from its signifier
     */
    tryImport<T = any>(signifier: string, context?: string): Promise<T> | undefined | null;
    /**
     * Make context URL
     */
    protected makeContextURL(context?: string): string;
}
//# sourceMappingURL=module.d.ts.map