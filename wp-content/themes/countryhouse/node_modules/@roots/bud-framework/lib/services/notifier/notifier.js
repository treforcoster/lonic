import { __decorate, __metadata } from "tslib";
import { platform } from 'node:os';
import { Bud, Service } from '@roots/bud-framework';
import { bind } from '@roots/bud-support/decorators';
import isEmpty from '@roots/bud-support/lodash/isEmpty';
import isString from '@roots/bud-support/lodash/isString';
import { open, openEditor } from '@roots/bud-support/open';
import { notifierPath } from './notifierPath.js';
/**
 * Notifier
 */
export class Notifier extends Service {
    constructor() {
        super(...arguments);
        /**
         * Track if browser has already been opened once
         * to prevent multiple browser tabs from opening
         * when changes are saved.
         *
         * When {@link Notifier.openBrowser} is called and this
         * prop is true the call exits early. Otherwise, the
         * browser is opened and this prop is set to true.
         *
         * @see {@link https://github.com/roots/bud/issues/2041}
         */
        this.browserOpened = false;
    }
    /**
     * True if notifications are enabled
     */
    get notificationsEnabled() {
        return this.app.isCLI() && this.app?.context.args.notify === true;
    }
    /**
     * True if editor opening is enabled
     */
    get openEditorEnabled() {
        return this.app.isCLI() && this.app?.context.args.editor === true;
    }
    /**
     * True if browser opening is enabled
     */
    get openBrowserEnabled() {
        return this.app.isCLI() && this.app?.context.args.browser === true;
    }
    /**
     * {@link Service.boot}
     */
    async boot(bud) {
        if (this.notificationsEnabled) {
            const { NotificationCenter } = await import(`@roots/bud-support/node-notifier`);
            this.notificationCenter =
                platform() !== `darwin`
                    ? new NotificationCenter()
                    : new NotificationCenter({ customPath: notifierPath });
        }
        if (bud.env.has(`BUD_EDITOR`)) {
            this.editor = bud.env.get(`BUD_EDITOR`);
        }
        else if (bud.env.has(`VISUAL`)) {
            this.editor = bud.env.get(`VISUAL`);
        }
        else if (bud.env.has(`EDITOR`)) {
            this.editor = bud.env.get(`EDITOR`);
        }
    }
    /**
     * Emit OS notification center notice
     */
    notify(notification, callback) {
        if (!this.notificationsEnabled)
            return;
        this.notificationCenter.notify({
            title: this.app.label,
            group: this.app.label,
            ...notification,
        }, callback);
    }
    /**
     * Open editor on error
     */
    openEditor(input) {
        if (!this.openEditorEnabled)
            return;
        if (!isString(this.editor))
            return;
        if (!input || isEmpty(input))
            return;
        const files = Array.isArray(input) ? input : [input];
        files.map(file => this.app.info(`opening`, file, `in`, this.editor));
        return openEditor(files, { editor: this.editor });
    }
    /**
     * Open browser in development
     */
    async openBrowser(url) {
        if (!this.app.isDevelopment)
            return;
        if (!this.openBrowserEnabled)
            return;
        if (!isString(url))
            return;
        if (this.browserOpened)
            return;
        this.browserOpened = true;
        if (isString(this.browser)) {
            return await open(url, { app: { name: this.browser } });
        }
        return await open(url);
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Bud]),
    __metadata("design:returntype", Promise)
], Notifier.prototype, "boot", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "notify", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "openEditor", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Notifier.prototype, "openBrowser", null);
//# sourceMappingURL=notifier.js.map