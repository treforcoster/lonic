import { join, sep } from 'node:path';
import isRegExp from '@roots/bud-support/lodash/isRegExp';
import isString from '@roots/bud-support/lodash/isString';
/**
 * Create a module chunk
 *
 * @example
 * Create an `alpine` chunk
 *
 * ```js
 * bud.bundle('alpine')
 * ```
 */
export const bundle = function (name, matcher) {
    const test = normalize(matcher ?? name);
    this.hooks.on(`build.optimization.splitChunks`, splitChunks => {
        const template = this.hooks.filter(`feature.hash`)
            ? `[name].[contenthash].js`
            : `[name].js`;
        const entry = {
            [name]: {
                idHint: name,
                filename: join(`js`, `bundle`, name, template),
                test,
                priority: -10,
            },
        };
        if (splitChunks === false || splitChunks === undefined) {
            return {
                chunks: `all`,
                automaticNameDelimiter: sep,
                minSize: 0,
                cacheGroups: { ...entry },
            };
        }
        return {
            ...splitChunks,
            cacheGroups: {
                ...(splitChunks.cacheGroups ?? {}),
                ...entry,
            },
        };
    });
    this.api.logger.success(`bud.bundle: chunk settings registered`);
    return this;
};
const normalize = (matcher) => {
    return isRegExp(matcher)
        ? matcher
        : isString(matcher)
            ? getTestRegExp([matcher])
            : getTestRegExp(matcher);
};
const getTestRegExp = (matcher) => new RegExp(`[\\/](${matcher.reduce((a, c) => `${a}|${c}`)})[\\/]`);
//# sourceMappingURL=index.js.map