import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import isObject from '@roots/bud-support/lodash/isObject';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
import omit from '@roots/bud-support/lodash/omit';
export const defaultHtmlPluginOptions = {
    template: resolve(dirname(fileURLToPath(import.meta.url)), `..`, `..`, `..`, `vendor`, `template.html`),
};
export const getHtmlPluginOptions = (bud, options) => {
    if (isUndefined(options) || !isObject(options))
        return defaultHtmlPluginOptions;
    const template = isUndefined(options.template)
        ? defaultHtmlPluginOptions.template
        : bud.path(options.template);
    return { template, ...omit(options, `replace`, `template`) };
};
export const getInterpolatePluginOptions = (bud, options) => {
    if (!isObject(options) ||
        isUndefined(options) ||
        isUndefined(options.replace)) {
        return bud.env.getPublicEnv();
    }
    return { ...bud.env.getPublicEnv(), ...options.replace };
};
//# sourceMappingURL=helpers.js.map