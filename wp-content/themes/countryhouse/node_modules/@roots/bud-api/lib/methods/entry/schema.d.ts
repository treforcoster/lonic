import { z } from '@roots/bud-support/zod';
/**
 * Entrypoint signifier
 */
export declare const entrypointSignifier: z.ZodString;
/**
 * `import` key value
 */
export declare const importItem: z.ZodString;
/**
 * `import` array
 */
export declare const importArray: z.ZodArray<z.ZodString, "atleastone">;
/**
 * entrypoints records
 */
export declare const inputRecord: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
/**
 * normalized entry record value
 *
 * @remarks how it should look after parsing
 */
export declare const normalEntryValue: z.ZodObject<{
    import: z.ZodArray<z.ZodString, "atleastone">;
    dependsOn: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    import: [string, ...string[]];
    dependsOn?: string[] | undefined;
}, {
    import: [string, ...string[]];
    dependsOn?: string[] | undefined;
}>;
export declare const entrypointsRecord: z.ZodRecord<z.ZodString, z.ZodObject<{
    import: z.ZodArray<z.ZodString, "atleastone">;
    dependsOn: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    import: [string, ...string[]];
    dependsOn?: string[] | undefined;
}, {
    import: [string, ...string[]];
    dependsOn?: string[] | undefined;
}>>;
/**
 * fn parameters
 */
export declare const parameters: z.ZodUnion<[z.ZodTuple<[z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>], null>, z.ZodRecord<z.ZodString, z.ZodObject<{
    import: z.ZodArray<z.ZodString, "atleastone">;
    dependsOn: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    import: [string, ...string[]];
    dependsOn?: string[] | undefined;
}, {
    import: [string, ...string[]];
    dependsOn?: string[] | undefined;
}>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>]>;
//# sourceMappingURL=schema.d.ts.map