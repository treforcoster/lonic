import { z } from '@roots/bud-support/zod';
/**
 * Alias signifier
 */
export declare const signifier: z.ZodString;
/**
 * Alias value
 */
export declare const item: z.ZodString;
/**
 * Alias value
 */
export declare const disabled: z.ZodLiteral<false>;
/**
 * Alias value
 */
export declare const arrayed: z.ZodArray<z.ZodString, "many">;
/**
 * Alias values
 *
 * @remarks either a {@link String} {@link Array} or `false`
 */
export declare const value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>;
/**
 * Alias records
 *
 * @remarks values keyed to {@link signifier} keys
 */
export declare const records: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>>;
/**
 * Alias callback
 *
 * @remarks
 * a function that accepts {@link records} and returns {@link records}
 * the {@link records} value received by the function may be `undefined`
 */
export declare const callback: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>>>], z.ZodUnknown>, z.ZodPromise<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>>>>;
/**
 * parameters
 *
 * @remarks either a paired {@link signifier} {@link records} object or a {@link Callback} function
 */
export declare const parameters: z.ZodEffects<z.ZodUnion<[z.ZodTuple<[z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>], null>, z.ZodTuple<[z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>>>], z.ZodUnknown>, z.ZodPromise<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>>>>], null>, z.ZodTuple<[z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodLiteral<false>]>>], null>]>, [string, string | false | string[]] | [(args_0: Record<string, string | false | string[]> | undefined, ...args_1: unknown[]) => Promise<Record<string, string | false | string[]>>] | [Record<string, string | false | string[]>], [string, string | false | string[]] | [(args_0: Record<string, string | false | string[]> | undefined, ...args_1: unknown[]) => Promise<Record<string, string | false | string[]>>] | [Record<string, string | false | string[]>]>;
//# sourceMappingURL=schema.d.ts.map