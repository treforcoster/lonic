import { isAbsolute } from 'path';
export const copyDir = async function copyDir(request, context, overrides = {}) {
    const app = this;
    const makePatternObjectFromString = fromStringFactory(app, overrides);
    const makePatternObjectFromTuple = fromTupleFactory(app, overrides);
    if (!context)
        context = app.path(`@src`);
    if (!isAbsolute(context))
        context = app.path(context);
    const result = typeof request === `string`
        ? makePatternObjectFromString(request, context)
        : makePatternObjectFromTuple(...request, context);
    app.extensions
        .get(`@roots/bud-extensions/copy-webpack-plugin`)
        .setOptions(options => ({
        ...(options ?? {}),
        patterns: [...(options?.patterns ?? []), result],
    }));
    app.api.logger.success(`bud.copyDir: asset pattern added`);
    return app;
};
/**
 * Take an input string and return a {@link CopyPlugin.ObjectPattern}
 */
export const fromStringFactory = (app, overrides) => (from, context) => ({
    from: app.relPath(from),
    to: app.relPath(from, `@file`),
    context,
    globOptions: { dot: false },
    ...overrides,
});
/**
 * Take an input [from, to] tuple and return a {@link CopyPlugin.ObjectPattern}
 */
export const fromTupleFactory = (app, overrides) => (from, to, context) => ({
    from: app.relPath(from),
    to: app.relPath(to, `@file`),
    context,
    globOptions: { dot: false },
    ...overrides,
});
//# sourceMappingURL=index.js.map