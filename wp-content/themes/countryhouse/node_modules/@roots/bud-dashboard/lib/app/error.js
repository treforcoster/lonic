import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable n/no-process-env */
import cleanStack from '@roots/bud-support/clean-stack';
import figures from '@roots/bud-support/figures';
import isString from '@roots/bud-support/lodash/isString';
import * as Ink from 'ink';
export const Error = ({ error }) => {
    if (!error) {
        return (_jsx(Ink.Box, { children: _jsx(Ink.Text, { children: "An unknown error has occurred." }) }));
    }
    if (isString(error)) {
        return (_jsxs(Ink.Box, { flexDirection: "column", paddingTop: 1, children: [_jsx(Ink.Text, { backgroundColor: "red", color: "white", children: ` Error ` }), _jsx(Ink.Box, { marginTop: 1, children: _jsxs(Ink.Text, { children: [_jsx(Ink.Text, { color: "red", children: figures.cross }), ` `, error] }) })] }));
    }
    return (_jsxs(Ink.Box, { flexDirection: "column", paddingTop: 1, children: [_jsxs(Ink.Text, { backgroundColor: "red", color: "white", children: [` `, error.name, ` `] }), error.message ? (_jsx(Ink.Box, { marginTop: 1, children: _jsxs(Ink.Text, { children: [_jsx(Ink.Text, { color: "red", children: figures.cross }), ` `, error.message] }) })) : null, error.details && (_jsx(Ink.Box, { marginTop: 1, children: _jsxs(Ink.Text, { children: [_jsxs(Ink.Text, { color: "blue", children: [figures.ellipsis, ` `, "Error details", ` `] }), _jsx(Ink.Text, { children: error.details })] }) })), !error.origin && error.stack && (_jsxs(Ink.Box, { marginTop: 1, flexDirection: "column", children: [_jsxs(Ink.Text, { color: "blue", children: [figures.hamburger, ` `, "Stack trace"] }), _jsx(Ink.Text, { dimColor: true, children: cleanStack(error.stack, {
                            basePath: process.env.PROJECT_CWD ??
                                process.env.INIT_CWD ??
                                process.cwd(),
                            pretty: true,
                        })
                            .split(`\n`)
                            .slice(1, 5)
                            .join(`\n`) })] })), error.docs && (_jsx(Ink.Box, { marginTop: 1, children: _jsxs(Ink.Text, { children: [_jsxs(Ink.Text, { color: "blue", children: [figures.arrowRight, ` `, "Documentation"] }), ` `, _jsx(Ink.Text, { children: error.docs.href })] }) })), error.issues && (_jsx(Ink.Box, { marginTop: 1, children: _jsxs(Ink.Text, { children: [_jsxs(Ink.Text, { color: "blue", children: [figures.arrowRight, ` `, "Issues"] }), ` `, _jsx(Ink.Text, { children: error.issues.href })] }) })), error.origin && (_jsx(Ink.Box, { children: _jsx(Error, { error: error.origin }) })), error.file && (_jsxs(Ink.Box, { marginTop: 1, children: [_jsxs(Ink.Text, { color: "blue", children: [figures.info, ` `, "See file", ` `] }), _jsx(Ink.Text, { children: error.file.path })] }))] }));
};
export const Message = ({ children }) => (_jsx(Ink.Box, { flexDirection: "column", children: _jsx(Ink.Text, { children: children }) }));
//# sourceMappingURL=error.js.map