import { __decorate, __metadata } from "tslib";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable no-console */
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
import figures from '@roots/bud-support/figures';
import isString from '@roots/bud-support/lodash/isString';
import chalk from 'chalk';
import * as Ink from 'ink';
import { Console } from './dashboard/console/index.js';
/**
 * Dashboard service
 */
export class Dashboard extends Service {
    /**
     * Is silent?
     */
    get silent() {
        return this.app.isCLI() && this.app.context.args.log === false;
    }
    /**
     * Run dashboard
     */
    async update(stats) {
        if (!stats)
            return this;
        this.stats = stats;
        if (this.silent) {
            this.logger.log(`dashboard called but --silent flag is set.`);
            return this;
        }
        if (!this.app.isCLI() || this.app.context.args.ci === true) {
            this.renderString(stats);
            return this;
        }
        try {
            await this.render(stats.toJson(this.app.hooks.filter(`build.stats`)));
        }
        catch (error) {
            this.renderString(stats);
        }
        return this;
    }
    /**
     * Render webpack stats
     */
    async render(stats) {
        try {
            const Dashboard = await import(`./dashboard/index.js`);
            const tagInnerChilds = ({ children }) => children.map(child => ({ ...child, isChild: true }));
            const compilations = stats.children?.length
                ? [
                    ...stats.children,
                    ...stats.children?.map(tagInnerChilds),
                ].flat()
                : [stats];
            const App = process.stdout.isTTY && !this.app.isProduction
                ? Dashboard.TTYApp
                : Dashboard.App;
            Ink.render(_jsxs(Ink.Box, { flexDirection: "column", marginTop: 1, children: [this.app.consoleBuffer.queue?.length > 0 && (_jsxs(_Fragment, { children: [_jsx(Console, { messages: this.app.consoleBuffer.fetchAndRemove() }), _jsx(Ink.Box, { children: _jsx(Ink.Text, { children: ` ` }) })] })), _jsx(App, { compilations: compilations.map(compilation => ({
                            ...compilation,
                            entrypoints: compilation.entrypoints ?? {},
                            assets: compilation.assets ?? {},
                            errors: this.compilationErrors(compilation.errors),
                            warnings: this.compilationErrors(compilation.warnings),
                        })), displayAssets: true, displayEntrypoints: true, displayServerInfo: false, context: this.app.context, mode: this.app.mode, devUrl: this.app.server?.url, publicDevUrl: this.app.server?.publicUrl, proxyUrl: this.app.hooks.filter(`dev.proxyUrl`), publicProxyUrl: this.app.hooks.filter(`dev.publicProxyUrl`), watchFiles: this.app.server?.watcher?.files })] }));
        }
        catch (error) { }
    }
    /**
     * Render stats as a simple string
     */
    renderString(stats) {
        const stringCompilation = stats.toString({
            preset: `minimal`,
            colors: true,
        });
        process.stdout.write(stringCompilation);
    }
    /**
     * Error formatter
     */
    compilationErrors(errors) {
        try {
            return (errors
                /* Unhelpful errors passed down the loader chain */
                .filter(({ message }) => !message?.includes(`HookWebpackError`))
                /* Format errors */
                .map(({ message, ...error }) => ({
                ...error,
                message: message
                    /* Discard unhelpful stack traces */
                    .split(/  at /)
                    .shift()
                    /* Discard unhelpful stuff preceeding message */
                    .split(/SyntaxError:?/)
                    .pop()
                    .split(/ModuleError:/)
                    .pop()
                    .split(/Error:/)
                    .pop()
                    /* Process line-by-line */
                    .split(`\n`)
                    /* Discard emoji */
                    .map(ln => ln.replaceAll(/Ã—/g, ``))
                    /* Discard origin */
                    .map(ln => ln.replaceAll(/\[.*\]/g, ``))
                    /* Replace project path with . */
                    .map(ln => ln.replaceAll(new RegExp(this.app.path(), `g`), `.`))
                    /* Add left padding and vert line */
                    .map(ln => `${chalk.dim(figures.lineVertical)} ${ln}`)
                    /* Discard empty lines */
                    .filter(ln => isString(ln) &&
                    ![``, ` `, `\n`].includes(ln) &&
                    !ln.match(/^\s*$/))
                    /* Reform message */
                    .join(`\n`),
            })));
        }
        catch (error) {
            throw error;
        }
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], Dashboard.prototype, "update", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Dashboard.prototype, "render", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], Dashboard.prototype, "renderString", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", void 0)
], Dashboard.prototype, "compilationErrors", null);
//# sourceMappingURL=service.js.map