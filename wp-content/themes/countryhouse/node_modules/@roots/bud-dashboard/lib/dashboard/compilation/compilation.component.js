import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { relative } from 'node:path/posix';
import figures from '@roots/bud-support/figures';
import * as Ink from 'ink';
import Chunk from '../chunk/chunk.component.js';
import ChunkGroup from '../chunk/chunkgroup.component.js';
import Space from '../display/space.component.js';
import Title from '../display/title.component.js';
import { color, colorFromStats, duration, longestAssetNameLength, } from '../format.js';
import Messages from '../messages/messages.component.js';
const onlyNotHot = ({ name }) => !name?.includes(`hot-update`);
const onlyStatic = ({ name }) => ![`.css`, `.js`].some(ext => name?.includes(ext));
const makeAssetGroupCallback = (assets) => (asset) => {
    const assetModule = assets?.find(a => a?.name === asset?.name);
    return { ...(asset ?? {}), ...(assetModule ?? {}) };
};
const Compilation = ({ displayAssets, displayEntrypoints, compilation, context, }) => {
    if (!compilation)
        return null;
    const groupAssets = makeAssetGroupCallback(compilation.assets);
    const entrypoints = Object.values(compilation.entrypoints)
        .filter(Boolean)
        .map(entrypoint => ({
        ...entrypoint,
        assets: entrypoint.assets.map(groupAssets),
    }));
    const assets = compilation.assets
        .filter(onlyNotHot)
        .filter(onlyStatic)
        .filter(Boolean)
        .map(groupAssets);
    const truncatedAssets = assets.splice(5);
    const longestEntrypointAssetLength = entrypoints.reduce((longest, entry) => Math.max(longestAssetNameLength(entry.assets), longest), 0);
    return (_jsxs(Ink.Box, { flexDirection: "column", children: [_jsxs(Ink.Box, { flexDirection: "row", children: [_jsxs(Ink.Text, { dimColor: true, children: [figures.lineDownRightArc, figures.line] }), _jsx(Ink.Text, { color: colorFromStats(compilation), children: compilation.errorsCount > 0 ? ` ${figures.cross}` : `` }), _jsx(Ink.Text, { children: ` ` }), _jsx(Ink.Text, { children: compilation.name }), _jsx(Ink.Text, { children: ` ` }), compilation.outputPath ? (_jsxs(Ink.Text, { color: color.blue, children: ["./", relative(context.basedir, compilation.outputPath)] })) : null, _jsx(Ink.Text, { children: ` ` }), _jsxs(Ink.Text, { dimColor: true, children: ["[", compilation.hash, "]"] })] }), !compilation.isChild ? (_jsxs(_Fragment, { children: [_jsx(Ink.Text, { dimColor: true, children: figures.lineVertical }), _jsx(Messages, { type: "error", color: color.red, messages: compilation.errors, figure: figures.cross }), _jsx(Messages, { type: "warning", color: color.yellow, messages: compilation.warnings, figure: figures.warning }), _jsx(Ink.Box, { flexDirection: "column", children: entrypoints.some(({ assets }) => assets?.length > 0) ? (_jsxs(Ink.Box, { flexDirection: "column", children: [_jsx(Title, { children: _jsx(Ink.Text, { color: colorFromStats(compilation), dimColor: displayEntrypoints === false, children: "entrypoints" }) }), displayEntrypoints
                                    ? entrypoints
                                        .filter(({ assets }) => assets.length > 0)
                                        .map((chunk, id) => (_jsx(Ink.Box, { flexDirection: "column", children: _jsx(ChunkGroup, { indent: [true], ...chunk, minWidth: longestEntrypointAssetLength, final: id === entrypoints.length - 1 }) }, id)))
                                    : null] })) : null }), assets?.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(Space, { children: _jsx(Ink.Text, { children: " " }) }), _jsxs(Ink.Box, { flexDirection: "column", children: [_jsx(Title, { children: _jsx(Ink.Text, { color: colorFromStats(compilation), dimColor: displayAssets === false, children: "assets" }) }), displayAssets ? (_jsxs(_Fragment, { children: [_jsx(Chunk, { assets: assets, indent: [true] }), truncatedAssets?.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(Space, { children: _jsx(Ink.Text, { children: " " }) }), _jsx(Space, { children: _jsxs(Ink.Text, { dimColor: true, children: [` `, figures.ellipsis, ` `, truncatedAssets.length, ` `, "additional asset(s) not shown"] }) })] })) : null] })) : null] })] })) : null] })) : null, _jsx(Space, { children: _jsx(Ink.Text, { children: " " }) }), _jsx(Title, { final: true, finalFigure: figures.lineUpRightArc, children: _jsxs(Ink.Text, { dimColor: true, children: ["compiled ", compilation.modules?.length, " modules in", ` `, duration(compilation.time)] }) })] }));
};
export default Compilation;
//# sourceMappingURL=compilation.component.js.map