import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, expose, label, options, production, } from '@roots/bud-framework/extension/decorators';
import { deprecated } from '@roots/bud-support/decorators';
/**
 * Terser configuration
 */
let BudTerser = class BudTerser extends Extension {
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore(bud) {
        if (!this.enabled) {
            this.logger.info(`minimizer disabled. skipping terser config.`);
            return;
        }
        const Terser = await import(`terser-webpack-plugin`);
        if (bud.extensions.has(`@roots/bud-swc`)) {
            const value = (_bud) => Terser.swcMinify;
            const callback = (_minify) => value;
            this.set(`minify`, callback);
        }
        else if (bud.extensions.has(`@roots/bud-esbuild`)) {
            const value = (_bud) => Terser.esbuildMinify;
            const callback = (_minify) => value;
            this.set(`minify`, callback);
        }
        else {
            const value = (_bud) => Terser.terserMinify;
            const callback = (_minify) => value;
            this.set(`minify`, callback);
        }
        bud.hooks.on(`build.optimization.minimizer`, (minimizers = []) => {
            minimizers.push(new Terser.default(this.options));
            this.logger.success(`terser added to minimizers`, minimizers);
            return minimizers;
        });
    }
    /**
     * Drop console
     */
    dropConsole(enable = true) {
        this.set(`terserOptions.compress.drop_console`, enable);
        return this;
    }
    /**
     * Drop comments
     */
    dropComments(enable = true) {
        this.set(`terserOptions.format.comments`, !enable);
        return this;
    }
    /**
     * Drop debugger statements
     */
    dropDebugger(enable = true) {
        this.set(`terserOptions.compress.drop_debugger`, enable);
        return this;
    }
    /**
     * Mangle output
     * @deprecated Use {@link BudTerser.set} instead
     *
     * @example
     * ```js
     * bud.terser.set(`terserOptions.mangle`, {})
     * ```
     */
    mangle(mangle) {
        this.set(`terserOptions.mangle`, mangle);
        return this;
    }
    /**
     * @deprecated Use {@link BudTerser.dropComments} instead
     */
    comments(comments = true) {
        this.set(`terserOptions.format.comments`, comments);
        return this;
    }
    /**
     * @deprecated Use {@link BudTerser.dropDebugger} instead
     */
    debugger(enable = true) {
        this.set(`terserOptions.compress.drop_debugger`, enable);
        return this;
    }
    /**
     * @deprecated Use {@link BudTerser.set} instead
     *
     * @example
     * ```js
     * bud.terser.set(`terserOptions.minify`, () => {})
     * ```
     */
    setMinifier(minify) {
        this.set(`terserOptions.minify`, minify);
        return this;
    }
    /**
     * Terser options getter/setter
     *
     * @deprecated Use {@link BudTerser.set} and {@link BudTerser.get} instead
     *
     * @example
     * ```js
     * bud.terser.set('terserOptions', {})
     * ```
     *
     * @example
     * ```js
     * bud.terser.set('terserOptions.compress', true)
     * ```
     *
     * @example
     * ```js
     * bud.terser.get('terserOptions')
     * ```
     */
    get terserOptions() {
        return this.get(`terserOptions`) ?? {};
    }
    set terserOptions(terserOptions) {
        this.set(`terserOptions`, terserOptions);
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudTerser.prototype, "buildBefore", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "dropConsole", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "dropComments", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "dropDebugger", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "mangle", null);
__decorate([
    bind,
    deprecated(`bud.terser`, `Use bud.terser.dropComments instead`, [
        [`Drop comments`, `bud.terser.dropComments()`],
        [`Preserve comments`, `bud.terser.dropComments(false)`],
        [
            `Alternative (using bud.terser.set)`,
            `bud.terser.set('terserOptions.format.comments', true)`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "comments", null);
__decorate([
    bind,
    deprecated(`bud.terser`, `Use bud.terser.dropDebugger instead`, [
        [`Drop debugger statements`, `bud.terser.dropDebugger()`],
        [`Preserve debugger statements`, `bud.terser.dropDebugger(false)`],
        [
            `Alternative (using bud.terser.set)`,
            `bud.terser.set('terserOptions.compress.drop_debugger', true)`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "debugger", null);
__decorate([
    bind,
    deprecated(`bud.terser`, `Use bud.terser.set instead`, [
        [
            `Set the minifier`,
            `bud.terser.set('terserOptions.minify', () => () => minifier)`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "setMinifier", null);
BudTerser = __decorate([
    label(`@roots/bud-terser`),
    dependsOn([`@roots/bud-terser/css-minimizer`]),
    expose(`terser`),
    options({
        extractComments: false,
        parallel: true,
        terserOptions: {
            compress: {
                drop_console: false,
                drop_debugger: true,
                defaults: true,
                unused: true,
            },
            format: {
                ascii_only: true,
                comments: false,
            },
            mangle: {
                safari10: true,
            },
        },
    }),
    production
], BudTerser);
export { BudTerser };
//# sourceMappingURL=extension.js.map