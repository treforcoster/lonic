import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type Plugin from 'terser-webpack-plugin';
/**
 * `terser-webpack-plugin` options
 */
export type Options = Plugin.BasePluginOptions & {
    minify?: Plugin.MinimizerImplementation<any>;
    include: RegExp;
    exclude: RegExp;
    extractComments: boolean;
    parallel: boolean;
    terserOptions?: Plugin.MinimizerOptions<any>;
};
/**
 * Terser configuration
 */
export declare class BudTerser extends Extension<Options> {
    /**
     * {@link Extension.buildBefore}
     */
    buildBefore(bud: Bud): Promise<void>;
    /**
     * Drop console
     */
    dropConsole(enable?: boolean): this;
    /**
     * Drop comments
     */
    dropComments(enable?: boolean): this;
    /**
     * Drop debugger statements
     */
    dropDebugger(enable?: boolean): this;
    /**
     * Mangle output
     * @deprecated Use {@link BudTerser.set} instead
     *
     * @example
     * ```js
     * bud.terser.set(`terserOptions.mangle`, {})
     * ```
     */
    mangle(mangle: Plugin.TerserOptions['mangle']): this;
    /**
     * @deprecated Use {@link BudTerser.dropComments} instead
     */
    comments(comments?: boolean): this;
    /**
     * @deprecated Use {@link BudTerser.dropDebugger} instead
     */
    debugger(enable?: boolean): this;
    /**
     * @deprecated Use {@link BudTerser.set} instead
     *
     * @example
     * ```js
     * bud.terser.set(`terserOptions.minify`, () => {})
     * ```
     */
    setMinifier(minify: any): this;
    /**
     * Terser options getter/setter
     *
     * @deprecated Use {@link BudTerser.set} and {@link BudTerser.get} instead
     *
     * @example
     * ```js
     * bud.terser.set('terserOptions', {})
     * ```
     *
     * @example
     * ```js
     * bud.terser.set('terserOptions.compress', true)
     * ```
     *
     * @example
     * ```js
     * bud.terser.get('terserOptions')
     * ```
     */
    get terserOptions(): Options['terserOptions'];
    set terserOptions(terserOptions: Options['terserOptions']);
}
//# sourceMappingURL=extension.d.ts.map