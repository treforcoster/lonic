import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, expose, label, options, production, } from '@roots/bud-framework/extension/decorators';
/**
 * Terser css minimizer configuration
 */
let BudMinimizeCss = class BudMinimizeCss extends Extension {
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore({ hooks }) {
        const { Plugin } = await import(`@roots/bud-support/css-minimizer-webpack-plugin`);
        hooks.on(`build.optimization.minimizer`, (minimizer = []) => {
            minimizer.push(new Plugin(this.options));
            this.logger.success(`css-minimizer added to minimizers`);
            return minimizer;
        });
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudMinimizeCss.prototype, "buildBefore", null);
BudMinimizeCss = __decorate([
    label(`@roots/bud-terser/css-minimizer`),
    expose(`minimizeCss`),
    options({
        minimizerOptions: {
            preset: [
                `default`,
                {
                    discardComments: {
                        removeAll: true,
                    },
                },
            ],
        },
    }),
    production
], BudMinimizeCss);
export { BudMinimizeCss };
//# sourceMappingURL=extension.js.map