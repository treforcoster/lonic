import { readFile, realpath } from 'node:fs';
import { join } from 'node:path';
const isString = (value) => typeof value === `string`;
const resolveRealPath = async (path) => await new Promise((resolve, reject) => {
    realpath(path, (err, path) => {
        if (err)
            reject(err);
        resolve(path);
    });
});
const fileExists = async (path) => !!(await resolveRealPath(path));
export const hasYarnLockfile = async (basedir) => await fileExists(join(basedir, `yarn.lock`));
export const hasYarnBerryRc = async (basedir) => await fileExists(join(basedir, `.yarnrc.yml`));
export const hasNpmLockfile = async (basedir) => await fileExists(join(basedir, `package-lock.json`));
export const hasPnpmLockfile = async (basedir) => await fileExists(join(basedir, `pnpm-lock.yaml`));
export const getPackageManagerField = async (basedir) => {
    const path = await resolveRealPath(join(basedir, `package.json`));
    if (!path)
        return path;
    const packageManager = await new Promise(resolve => {
        readFile(path, (err, buffer) => {
            if (err)
                resolve(false);
            const data = JSON.parse(buffer.toString());
            if (`packageManager` in data) {
                resolve(data.packageManager);
            }
            resolve(false);
        });
    });
    if (isString(packageManager))
        return packageManager;
    return false;
};
export default async function (basedir = process.cwd()) {
    const packageField = await getPackageManagerField(basedir);
    if (packageField) {
        if (packageField.includes(`yarn`)) {
            if (await hasYarnBerryRc(basedir))
                return `yarn berry`;
            return `yarn`;
        }
        if (packageField.includes(`npm`))
            return `npm`;
        if (packageField.includes(`pnpm`))
            return `pnpm`;
    }
    if (await hasYarnLockfile(basedir)) {
        if (await hasYarnBerryRc(basedir))
            return `yarn berry`;
        return `yarn`;
    }
    if (await hasNpmLockfile(basedir))
        return `npm`;
    if (await hasPnpmLockfile(basedir))
        return `pnpm`;
}
//# sourceMappingURL=index.js.map