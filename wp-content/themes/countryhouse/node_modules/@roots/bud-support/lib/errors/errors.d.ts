import { InstanceOptions } from 'modern-errors';
interface BudErrorProps {
    isBudError: true;
    details: string;
    issues: URL;
    instance: string;
    thrownBy: string;
    docs: URL;
    origin: BudHandler;
    file: {
        name: string;
        path: string;
        sha1: string;
        module: any;
    };
}
declare const BudBaseError: import("modern-errors").ErrorSubclassCore<[], {}, import("modern-errors").CustomClass>;
declare class BudHandler extends BudBaseError {
    thrownBy: string | false;
    instance: string | `default`;
    file: {
        name: string;
        path: string;
        sha1: string;
        module: any;
    };
    origin: BudHandler | false;
    details: string | false;
    docs: URL | false;
    issues: URL | false;
    isBudError: boolean;
    constructor(message: string, options?: InstanceOptions & {
        props?: Partial<BudErrorProps>;
    });
    get message(): string;
}
declare const BudError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const ModuleError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    issues: URL;
}, typeof BudHandler>;
declare const ImportError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    issues: URL;
}, typeof BudHandler>;
declare const FileReadError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    issues: URL;
}, typeof BudHandler>;
declare const FileWriteError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    issues: URL;
}, typeof BudHandler>;
declare const ConfigError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    docs: URL;
}, typeof BudHandler>;
declare const InputError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    docs: URL;
}, typeof BudHandler>;
declare const CompilerError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    docs: URL;
    issues: URL;
}, typeof BudHandler>;
declare const ServerError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    docs: URL;
}, typeof BudHandler>;
declare const ExtensionError: import("modern-errors").ErrorSubclassCore<[], {
    details: string;
    docs: URL;
}, typeof BudHandler>;
export { BudHandler, BudError, ModuleError, ImportError, ExtensionError, FileReadError, FileWriteError, InputError, ServerError, CompilerError, ConfigError, };
//# sourceMappingURL=errors.d.ts.map