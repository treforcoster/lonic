/* eslint-disable n/no-process-env */
import ModernError from 'modern-errors';
const BudBaseError = ModernError.subclass(`BaseError`, {});
class BudHandler extends BudBaseError {
    constructor(message, options) {
        super(message, options);
        this.isBudError = true;
        this.thrownBy = options?.props?.thrownBy ?? false;
        this.instance = options?.props?.instance ?? `default`;
        this.origin = options?.props?.origin ?? false;
        this.details = options?.props?.details ?? false;
        this.issues = options?.props?.issues ?? false;
        this.docs = options?.props?.docs ?? false;
        this.isBudError = true;
    }
    get message() {
        return this.message
            .replaceAll(/\n/g, `\n\n`)
            .replaceAll(process.env.INIT_CWD, `$INIT_CWD`)
            .replaceAll(process.env.PROJECT_CWD, `$PROJECT_CWD`);
    }
}
const BudError = BudBaseError.subclass(`BudError`, {
    custom: BudHandler,
});
const ModuleError = BudError.subclass(`ModuleError`, {
    props: {
        details: `Error accessing, writing to, importing or resolving a module.`,
        issues: new URL(`https://github.com/roots/bud/issues`),
    },
});
const ImportError = ModuleError.subclass(`ImportError`);
const FileReadError = ModuleError.subclass(`FileReadError`, {
    props: {
        details: `Error reading from a file`,
        issues: new URL(`https://github.com/roots/bud/issues`),
    },
});
const FileWriteError = ModuleError.subclass(`FileWriteError`, {
    props: {
        details: `Error writing to a file`,
        issues: new URL(`https://github.com/roots/bud/issues`),
    },
});
const ConfigError = BudError.subclass(`ConfigError`, {
    props: {
        details: `Error processing a project configuration file`,
        docs: new URL(`https://bud.js.org`),
    },
});
const InputError = BudError.subclass(`InputError`, {
    props: {
        details: `Error stemming from user input`,
        docs: new URL(`https://bud.js.org`),
    },
});
const CompilerError = BudError.subclass(`CompilerError`, {
    props: {
        details: `Error running the compiler instance.`,
        docs: new URL(`https://bud.js.org`),
        issues: new URL(`https://github.com/roots/bud/issues`),
    },
});
const ServerError = BudError.subclass(`ServerError`, {
    props: {
        details: `Error in the bud.js development server`,
        docs: new URL(`https://bud.js.org/docs/bud.serve`),
    },
});
const ExtensionError = BudError.subclass(`BudErrorError`, {
    props: {
        details: `Error in an extension`,
        docs: new URL(`https://bud.js.org`),
    },
});
export { BudHandler, BudError, ModuleError, ImportError, ExtensionError, FileReadError, FileWriteError, InputError, ServerError, CompilerError, ConfigError, };
//# sourceMappingURL=errors.js.map