import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, label } from '@roots/bud-framework/extension/decorators';
import { urlToHttpOptions } from 'url';
/**
 * Acorn adapter
 *
 * @see {@link https://github.com/roots/acorn}
 */
let Acorn = class Acorn extends Extension {
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore(bud) {
        bud.entrypoints.set(`publicPath`, ``);
        bud.manifest.set(`publicPath`, ``);
        bud.when(bud.isDevelopment, ({ hooks }) => hooks.action(`compiler.close`, this.writeHMR));
    }
    /**
     * Write hmr.json
     */
    async writeHMR(bud) {
        await bud.fs.write(bud.path(`@dist`, `hmr.json`), {
            dev: urlToHttpOptions(bud.root.server.publicUrl),
            proxy: urlToHttpOptions(bud.root.server.publicProxyUrl),
            publicPath: bud.publicPath(),
        });
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], Acorn.prototype, "buildBefore", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], Acorn.prototype, "writeHMR", null);
Acorn = __decorate([
    label(`@roots/sage/acorn`)
], Acorn);
export default Acorn;
//# sourceMappingURL=index.js.map