import { __decorate, __metadata } from "tslib";
import { join } from 'node:path';
import { Extension } from '@roots/bud-framework/extension';
import { bind, label } from '@roots/bud-framework/extension/decorators';
import stripAnsi from 'strip-ansi';
/**
 * Cache invalidation extension
 *
 * @remarks
 * Certain webpack components such as `eslint-webpack-plugin` and
 * `ts-loader` have issues with fs caching. This extension writes a file
 * to the cache directory which is used to invalidate the cache before
 * webpack is invoked on subsequent builds
 */
let InvalidateCacheExtension = class InvalidateCacheExtension extends Extension {
    /**
     * Invalidation file path
     */
    get invalidationFile() {
        return join(this.app.cache.cacheDirectory, `error.json`);
    }
    /**
     * {@link Extension.register}
     */
    async register(bud) {
        const invalidate = await bud.fs?.exists(this.invalidationFile);
        if (invalidate || (bud.isCLI() && bud.context.args.force)) {
            await bud.fs.remove(this.invalidationFile);
            await bud.fs.remove(bud.cache.cacheDirectory);
        }
        bud.after(async () => {
            bud.compiler.instance.hooks.done.tap(this.label, async (compiler) => {
                try {
                    if (!compiler.hasErrors())
                        return;
                    await bud.fs.json.write(this.invalidationFile, {
                        hash: compiler.hash,
                        errors: compiler.stats.flatMap(stats => stats
                            .toString({ preset: `errors-warnings`, colors: false })
                            .split(/\n/)
                            .map(stripAnsi)),
                    });
                }
                catch (e) { }
            });
        });
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], InvalidateCacheExtension.prototype, "register", null);
InvalidateCacheExtension = __decorate([
    label(`@roots/bud-cache/invalidate-cache`)
], InvalidateCacheExtension);
export default InvalidateCacheExtension;
//# sourceMappingURL=index.js.map