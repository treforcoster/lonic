import { __decorate, __metadata } from "tslib";
import { createHash } from 'node:crypto';
import { join } from 'node:path';
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
import isString from '@roots/bud-support/lodash/isString';
import { hash } from '@roots/bud-support/utilities/args';
import InvalidateCacheExtension from '../invalidate-cache/index.js';
/**
 * Cache service class
 */
export default class Cache extends Service {
    constructor() {
        super(...arguments);
        /**
         * Enabled
         */
        this.enabled = true;
    }
    /**
     * Type
     */
    get name() {
        return this.app.hooks.filter(`build.cache.name`, this.app.hooks.filter(`build.name`, join(`webpack`, this.app.mode)));
    }
    set name(name) {
        this.app.hooks.on(`build.cache.name`, name);
    }
    /**
     * Type
     */
    get type() {
        return this.app.hooks.filter(`build.cache.type`, this.app.isCLI() && isString(this.app.context.args.cache)
            ? this.app.context.args.cache
            : `filesystem`);
    }
    set type(type) {
        this.app.hooks.on(`build.cache.type`, type);
    }
    /**
     * version
     */
    get version() {
        const version = createHash(`sha1`);
        version.update(hash);
        Object.values(this.app.context.files ?? {})
            .filter(file => file?.bud || file?.name?.includes(`package.json`))
            .map(({ sha1 }) => version.update(sha1));
        return this.app.hooks.filter(`build.cache.version`, version.digest(`base64`));
    }
    set version(version) {
        this.app.hooks.on(`build.cache.version`, version);
    }
    /**
     * Cache directory
     */
    get cacheDirectory() {
        return this.app.hooks.filter(`build.cache.cacheDirectory`, this.app.path(`@storage`, this.app.label, `cache`));
    }
    set cacheDirectory(directory) {
        this.app.hooks.on(`build.cache.cacheDirectory`, directory);
    }
    /**
     * Webpack configuration
     */
    get configuration() {
        if (this.enabled !== true)
            return false;
        return this.type === `memory`
            ? true
            : {
                name: this.name,
                type: this.type,
                store: `pack`,
                allowCollectingMemory: true,
                cacheDirectory: this.cacheDirectory,
                idleTimeout: 10000,
                idleTimeoutForInitialStore: 0,
                profile: false,
                version: this.app.hooks.filter(`build.cache.version`, this.version),
            };
    }
    /**
     * {@link Extension.booted}
     */
    async booted(bud) {
        await bud.extensions.add(InvalidateCacheExtension);
        this.app.success(`cache initialized`);
    }
    /**
     * Flush cache
     */
    async flush() {
        await this.app.fs.remove(this.cacheDirectory);
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], Cache.prototype, "booted", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Cache.prototype, "flush", null);
//# sourceMappingURL=index.js.map