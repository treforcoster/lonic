import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, dependsOnOptional, expose, label, options, } from '@roots/bud-framework/extension/decorators';
/**
 * Sass configuration
 */
let BudSass = class BudSass extends Extension {
    /**
     * {@link Extension.register}
     */
    async register(bud) {
        const implementation = await this.import(`sass`);
        this.setOptions({ implementation, sourceMap: true });
        bud.build
            .setLoader(`sass-loader`, await this.resolve(`sass-loader`, import.meta.url))
            .setItem(`sass`, {
            ident: `sass`,
            loader: `sass-loader`,
            options: () => this.options,
        })
            .setRule(`sass`, {
            test: (app) => app.hooks.filter(`pattern.sass`),
            include: [app => app.path(`@src`)],
        });
        bud.hooks.on(`build.resolve.extensions`, ext => ext.add(`.scss`).add(`.sass`));
    }
    /**
     * {@link Extension.boot}
     */
    async boot(bud) {
        if (bud.postcss) {
            bud.postcss.set(`postcssOptions.syntax`, `postcss-scss`);
        }
        bud.build.rules.sass.setUse(() => [
            bud.build.items.precss,
            bud.build.items.css,
            bud.build.items.postcss,
            bud.build.items.resolveUrl,
            bud.build.items.sass,
        ].filter(Boolean));
    }
    /**
     * Register global stylsheet
     *
     * @remarks
     * Used to register styles which are included globally
     *
     * @example
     * ```ts
     * bud.sass.registerGlobal(`$primary-color: #ff0000;`)
     * ```
     */
    registerGlobal(data) {
        return this.set(`additionalData`, (value = ``) => {
            const code = (Array.isArray(data) ? data : [data])
                .map(str => str.trim())
                .filter(Boolean)
                .join(`\n`);
            return value.concat(code);
        });
    }
    /**
     * Import a partial globally
     *
     * @remarks
     * Used to import a partial globally (such as a `variables.scss` file)
     *
     * @example
     * With a single module signifier:
     * ```ts
     * bud.sass.importGlobal('styles/variables.scss')
     * ```
     *
     * @example
     * With an array of module signifiers:
     * ```ts
     * bud.sass.importGlobal([
     *  'styles/variables.scss',
     *  'styles/mixins.scss',
     * ])
     * ```
     */
    importGlobal(data) {
        const globals = (Array.isArray(data) ? data : [data])
            .map(str => str.trim())
            .filter(Boolean)
            .map(item => `@import "${item}";`);
        return this.registerGlobal(globals);
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudSass.prototype, "register", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudSass.prototype, "boot", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudSass.prototype, "registerGlobal", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudSass.prototype, "importGlobal", null);
BudSass = __decorate([
    label(`@roots/bud-sass`),
    dependsOn([`@roots/bud-sass/resolve-url`]),
    dependsOnOptional([`@roots/bud-postcss`]),
    options({
        implementation: null,
        sourceMap: true,
    }),
    expose(`sass`)
], BudSass);
export { BudSass };
//# sourceMappingURL=extension.js.map