import { __decorate, __metadata } from "tslib";
import { bind } from 'helpful-decorators';
import uniq from 'lodash/uniq.js';
import Webpack from 'webpack';
import { HtmlEmitter } from './html.emitter.js';
/**
 * Produces `entrypoints.json` artifact with compiled assets broken down
 * by entrypoint and then filetype.
 *
 * @example
 * ```js
 * import {EntrypointsWebpackPlugin} from '@roots/entrypoints-webpack-plugin'
 *
 * const config = {
 *   plugins: [new EntrypointsWebpackPlugin()]
 * }
 * ```
 */
export class EntrypointsWebpackPlugin {
    /**
     * Class constructor
     */
    constructor(options) {
        this.options = options;
        /**
         * Plugin compiler ident
         */
        this.plugin = {
            name: `EntrypointsManifestPlugin`,
            stage: Infinity,
        };
        /**
         * Artifact filename
         */
        this.name = `entrypoints.json`;
    }
    /**
     * Webpack plugin API's `apply` hook
     */
    apply(compiler) {
        this.assets = {};
        this.compiler = compiler;
        this.options.publicPath =
            this.options.publicPath ??
                this.compiler.options.output.publicPath ??
                ``;
        this.options.publicPath = this.options.publicPath.replace(`auto`, ``);
        this.compiler.hooks.thisCompilation.tap(this.plugin, (compilation) => {
            this.compilation = compilation;
            this.compilation.hooks.processAssets.tap({ ...this.plugin, additionalAssets: true }, this.processAssets);
        });
    }
    /**
     * Runs through each entrypoint entry and adds to the
     * manifest
     */
    processAssets() {
        this.compilation.entrypoints.forEach(entry => {
            this.getEntrypointFiles(entry)
                .filter(({ file }) => !file.includes(`hot-update`))
                .map(({ key, file }) => {
                this.addToManifest({ key, entry: entry.name, file });
            });
        });
        this.options.emitHtml &&
            new HtmlEmitter(this.compilation, this.assets, this.options.publicPath).emit();
        Object.assign(this.compilation.assets, {
            [this.name]: new Webpack.sources.RawSource(JSON.stringify(this.assets), true),
        });
    }
    /**
     * Adds an entry to the manifest
     */
    addToManifest({ key = null, entry, file, }) {
        const type = file.split(`.`).pop();
        if (!this.assets[entry]) {
            this.assets[entry] = { [type]: null };
        }
        this.assets[entry] = {
            ...this.assets[entry],
            [type]: this.options.type === `object` && key
                ? {
                    ...(this.assets[entry][type] ?? {}),
                    [key]: this.options.publicPath.concat(file),
                }
                : uniq([
                    ...(this.assets[entry][type] ?? []),
                    this.options.publicPath.concat(file),
                ]),
        };
    }
    /**
     * Get assets from an entrypoint
     */
    getEntrypointFiles(entry) {
        const files = [];
        for (const chunk of entry.chunks) {
            Array.from(chunk.files).map(file => {
                files.push({ key: chunk.name, file });
            });
        }
        return files;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Webpack.Compiler]),
    __metadata("design:returntype", void 0)
], EntrypointsWebpackPlugin.prototype, "apply", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], EntrypointsWebpackPlugin.prototype, "processAssets", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], EntrypointsWebpackPlugin.prototype, "addToManifest", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], EntrypointsWebpackPlugin.prototype, "getEntrypointFiles", null);
//# sourceMappingURL=webpack.plugin.js.map