import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, expose, label, options, } from '@roots/bud-framework/extension/decorators';
import { deprecated } from '@roots/bud-support/decorators';
import { InputError } from '@roots/bud-support/errors';
import isFunction from '@roots/bud-support/lodash/isFunction';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
/**
 * PostCSS configuration
 */
let BudPostCss = class BudPostCss extends Extension {
    constructor() {
        super(...arguments);
        /**
         * Plugins registry
         */
        this._plugins = new Map([]);
    }
    /**
     * Boolean representing if project has a postcss config file
     */
    get overridenByProjectConfigFile() {
        if (!this.app.context.files)
            return false;
        return Object.values(this.app.context.files).some(file => file?.name?.includes(`postcss`) && file?.module);
    }
    /**
     * {@link Extension.register}
     */
    async register({ build, context }) {
        if (!this.overridenByProjectConfigFile) {
            this.setPlugins({
                import: await this.resolve(`postcss-import`, import.meta.url),
                nesting: await this.resolve(`postcss-nested`, import.meta.url),
                env: [
                    await this.resolve(`postcss-preset-env`, import.meta.url).then(path => path.replace(`.mjs`, `.cjs`)),
                    {
                        stage: 1,
                        features: {
                            'focus-within-pseudo-class': false,
                        },
                    },
                ],
            });
        }
        else {
            this.logger.log(`PostCSS configuration is being overridden by project configuration file.`);
            const file = Object.values(context.files).find(({ name, module }) => name.includes(`postcss`) && module);
            this.configFileOptions = file?.module?.default ?? file?.module;
        }
        build
            .setLoader(`postcss`, await this.resolve(`postcss-loader`, import.meta.url))
            .setItem(`postcss`, {
            loader: `postcss`,
            options: () => ({
                postcssOptions: this.configFileOptions || this.postcssOptions,
                sourceMap: this.get(`sourceMap`),
            }),
        });
        build.rules.css.setUse((items = []) => [...items, `postcss`]);
        build.rules.cssModule?.setUse((items = []) => [...items, `postcss`]);
    }
    /**
     * `postcssOptions`
     * @readonly
     */
    get postcssOptions() {
        let plugins = [];
        if (!this.plugins.size)
            return null;
        this.plugins.has(`import`) && plugins.push(this.plugins.get(`import`));
        this.plugins.has(`nesting`) &&
            plugins.push(this.plugins.get(`nesting`));
        Array.from(this.plugins.entries())
            .filter(([k]) => ![`import`, `nesting`, `env`].includes(k))
            .forEach(([_k, v]) => plugins.push(v));
        this.plugins.has(`env`) && plugins.push(this.plugins.get(`env`));
        const options = {
            config: this.get(`postcssOptions.config`),
            syntax: this.get(`postcssOptions.syntax`),
            parser: this.get(`postcssOptions.parser`),
            plugins: plugins.filter(Boolean),
        };
        this.logger.info(`postcss syntax`, options.syntax);
        this.logger.info(`postcss parser`, options.parser);
        this.logger.info(`postcss plugins`, options.plugins);
        return options;
    }
    /**
     * PostCss plugins accessor
     */
    get plugins() {
        return this._plugins;
    }
    /**
     * Get plugins
     */
    getPlugins() {
        return this._plugins;
    }
    /**
     * Replaces all plugins with provided value
     */
    setPlugins(plugins) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.setPlugins will not work as expected\n`, `tried to set:`, plugins);
        }
        const pluginMap = (plugin) => Array.isArray(plugin) ? plugin : [plugin];
        const setPlugin = (plugin) => this._plugins.set(...plugin);
        if (Array.isArray(plugins)) {
            plugins.map(pluginMap).forEach(setPlugin);
            return this;
        }
        if (plugins instanceof Map) {
            Array.from(plugins.entries()).forEach(([k, v]) => {
                this.setPlugin(k, v);
            });
            return this;
        }
        Object.entries(plugins).map(pluginMap).forEach(setPlugin);
        return this;
    }
    /**
     * Set a plugin
     */
    setPlugin(name, plugin) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.setPlugin will not work as expected\n`, `tried to set:`, name, plugin);
        }
        if (isUndefined(plugin)) {
            this._plugins.set(name, [name]);
            return this;
        }
        if (Array.isArray(plugin)) {
            this._plugins.set(name, plugin);
            return this;
        }
        this._plugins.set(name, [plugin]);
        return this;
    }
    /**
     * Remove a plugin
     */
    unsetPlugin(plugin) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.unsetPlugin will not work as expected\n`, `tried to unset:`, plugin);
        }
        this.plugins.has(plugin) && this.plugins.delete(plugin);
        return this;
    }
    /**
     * Get plugin options
     */
    getPluginOptions(plugin) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.getPluginOptions will not work as expected\n`, `tried to get: ${plugin}`);
        }
        return this.plugins.get(plugin).length &&
            this.plugins.get(plugin).length > 1
            ? this.plugins.get(plugin).pop()
            : {};
    }
    /**
     * Override plugin options
     */
    setPluginOptions(plugin, options) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.setPluginOptions will not work as expected`);
        }
        if (!this.plugins.has(plugin)) {
            throw new InputError(`${plugin} does not exist`);
        }
        this.plugins.set(plugin, [
            this.getPluginPath(plugin),
            isFunction(options)
                ? options(this.getPluginOptions(plugin))
                : options,
        ]);
        return this;
    }
    /**
     * Get plugin path
     */
    getPluginPath(plugin) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.getPluginPath will not work as expected`);
        }
        return this.plugins.has(plugin) && this.plugins.get(plugin)?.length
            ? [...this.plugins.get(plugin)].shift()
            : this.plugins.get(plugin);
    }
    /**
     * Set plugin path
     */
    setPluginPath(plugin, path) {
        if (this.overridenByProjectConfigFile) {
            this.logger.warn(`PostCSS configuration is being overridden by project configuration file.\n`, `bud.postcss.setPluginPath will not work as expected`);
        }
        const target = this.plugins.get(plugin);
        const hasOptions = target.length && target.length > 1;
        this.setPlugin(plugin, hasOptions ? [path, target.pop()] : [path]);
        return this;
    }
    /**
     * `postcssOptions.syntax`
     *
     * @deprecated use {@link BudPostCss.get} and {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.get('postcssOptions.syntax')
     * bud.postcss.set('postcssOptions.syntax', 'postcss-scss')
     * ```
     */
    get syntax() {
        return this.get(`postcssOptions.syntax`);
    }
    set syntax(syntax) {
        this.set(`postcssOptions.syntax`, syntax);
    }
    /**
     * Get `postcssOptions.syntax`
     *
     * @deprecated use {@link BudPostCss.get}
     *
     * @example
     * ```js
     * bud.postcss.get('postcssOptions.syntax')
     * ```
     */
    getSyntax() {
        return this.get(`postcssOptions.syntax`);
    }
    /**
     * Set `postcssOptions.syntax`
     *
     * @deprecated use {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.set('postcssOptions.syntax', 'postcss-scss')
     * ```
     */
    setSyntax(syntax) {
        this.set(`postcssOptions.syntax`, syntax);
        return this;
    }
    /**
     * postcss-loader's source-map option accessor
     *
     * @deprecated use {@link BudPostCss.get} and {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.get('sourceMap')
     * bud.postcss.set('sourceMap', true)
     * ```
     */
    get sourceMap() {
        return this.get(`sourceMap`);
    }
    set sourceMap(sourceMap) {
        this.set(`sourceMap`, sourceMap);
    }
    /**
     * Get postcss-loader's source-map option
     * @deprecated use {@link BudPostCss.get}
     *
     * @example
     * ```js
     * bud.postcss.get('sourceMap')
     * ```
     */
    getSourceMap() {
        return this.get(`sourceMap`);
    }
    /**
     * Set postcss-loader's `sourceMap` option
     * @deprecated use {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.set('sourceMap', true)
     * ```
     */
    setSourceMap(sourceMap) {
        this.set(`sourceMap`, sourceMap);
        return this;
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudPostCss.prototype, "register", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudPostCss.prototype, "getPlugins", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "setPlugins", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "setPlugin", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], BudPostCss.prototype, "unsetPlugin", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "getPluginOptions", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "setPluginOptions", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", String)
], BudPostCss.prototype, "getPluginPath", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "setPluginPath", null);
__decorate([
    deprecated(`bud.postcss`, `Use bud.postcss.get instead`, [
        [
            `get value of postcssOptions.syntax`,
            `bud.postcss.get('postcssOptions.syntax')`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], BudPostCss.prototype, "getSyntax", null);
__decorate([
    deprecated(`bud.postcss`, `Use bud.postcss.set instead`, [
        [
            `set value of postcssOptions.syntax`,
            `bud.postcss.set('postcssOptions.syntax', 'postcss-scss')`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "setSyntax", null);
__decorate([
    deprecated(`bud.postcss`, `Use bud.postcss.get instead`, [
        [`get value of sourceMap`, `bud.postcss.get('sourceMap')`],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Boolean)
], BudPostCss.prototype, "getSourceMap", null);
__decorate([
    deprecated(`bud.postcss`, `Use bud.postcss.set instead`, [
        [`set value of sourceMap`, `bud.postcss.set('sourceMap', true)`],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudPostCss.prototype, "setSourceMap", null);
BudPostCss = __decorate([
    label(`@roots/bud-postcss`),
    options({
        postcssOptions: {
            config: false,
        },
    }),
    expose(`postcss`)
], BudPostCss);
export { BudPostCss };
//# sourceMappingURL=extension.js.map