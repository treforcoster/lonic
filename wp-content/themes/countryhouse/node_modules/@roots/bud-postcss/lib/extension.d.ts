import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type { Plugin, Processor } from 'postcss';
type Input = string | Plugin | Processor | [string | Plugin | Processor, any?];
type InputList = Array<string | [string, any?]>;
type InputRecords = Record<string, Input>;
type InputMap = Map<string, Input>;
type Registry = Map<string, [string | Plugin | Processor, any?]>;
/**
 * PostCSS configuration options
 */
interface Options {
    sourceMap?: boolean;
    postcssOptions?: {
        config?: boolean;
        syntax?: string;
        parser?: string;
        plugins?: InputList;
    };
}
/**
 * PostCSS configuration
 */
export declare class BudPostCss extends Extension<Options> {
    /**
     * Boolean representing if project has a postcss config file
     */
    get overridenByProjectConfigFile(): boolean;
    /**
     * PostCSS configuration options (if overridden by project config file)
     */
    configFileOptions: Record<string, any> | undefined;
    /**
     * {@link Extension.register}
     */
    register({ build, context }: Bud): Promise<void>;
    /**
     * `postcssOptions`
     * @readonly
     */
    get postcssOptions(): Options[`postcssOptions`];
    /**
     * Plugins registry
     */
    protected readonly _plugins: Registry;
    /**
     * PostCss plugins accessor
     */
    get plugins(): Registry;
    /**
     * Get plugins
     */
    getPlugins(): Registry;
    /**
     * Replaces all plugins with provided value
     */
    setPlugins(plugins: InputRecords | InputMap | InputList): this;
    /**
     * Set a plugin
     */
    setPlugin(name: string, plugin?: Input): this;
    /**
     * Remove a plugin
     */
    unsetPlugin(plugin: string): this;
    /**
     * Get plugin options
     */
    getPluginOptions(plugin: string): Record<string, any>;
    /**
     * Override plugin options
     */
    setPluginOptions(plugin: string, options: Record<string, any> | ((options: Record<string, any>) => Record<string, any>)): this;
    /**
     * Get plugin path
     */
    getPluginPath(plugin: string): string;
    /**
     * Set plugin path
     */
    setPluginPath(plugin: string, path: string): this;
    /**
     * `postcssOptions.syntax`
     *
     * @deprecated use {@link BudPostCss.get} and {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.get('postcssOptions.syntax')
     * bud.postcss.set('postcssOptions.syntax', 'postcss-scss')
     * ```
     */
    get syntax(): string;
    set syntax(syntax: string);
    /**
     * Get `postcssOptions.syntax`
     *
     * @deprecated use {@link BudPostCss.get}
     *
     * @example
     * ```js
     * bud.postcss.get('postcssOptions.syntax')
     * ```
     */
    getSyntax(): string;
    /**
     * Set `postcssOptions.syntax`
     *
     * @deprecated use {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.set('postcssOptions.syntax', 'postcss-scss')
     * ```
     */
    setSyntax(syntax: string): this;
    /**
     * postcss-loader's source-map option accessor
     *
     * @deprecated use {@link BudPostCss.get} and {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.get('sourceMap')
     * bud.postcss.set('sourceMap', true)
     * ```
     */
    get sourceMap(): boolean;
    set sourceMap(sourceMap: boolean);
    /**
     * Get postcss-loader's source-map option
     * @deprecated use {@link BudPostCss.get}
     *
     * @example
     * ```js
     * bud.postcss.get('sourceMap')
     * ```
     */
    getSourceMap(): boolean;
    /**
     * Set postcss-loader's `sourceMap` option
     * @deprecated use {@link BudPostCss.set}
     *
     * @example
     * ```js
     * bud.postcss.set('sourceMap', true)
     * ```
     */
    setSourceMap(sourceMap: boolean): this;
}
export {};
//# sourceMappingURL=extension.d.ts.map