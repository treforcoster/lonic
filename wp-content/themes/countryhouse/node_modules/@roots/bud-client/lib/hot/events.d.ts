export declare const injectEvents: (eventSource: new (path: string) => EventSource) => {
    new (options: Partial<Options> & {
        name: string;
        path: string;
    }): {
        /**
         * Registered listeners
         *
         * @public
         */
        listeners: Set<Listener>;
        options: Partial<Options> & {
            name: string;
            path: string;
        };
        /**
         * EventSource `onopen` handler
         * @public
         */
        onopen: () => void;
        /**
         * EventSource `onmessage` handler
         * @public
         */
        onmessage: (payload: MessageEvent) => Promise<void>;
        /**
         * EventSource `addMessageListener` handler
         * @public
         */
        addListener(listener: Listener): this;
        onerror: (this: EventSource, ev: Event) => any;
        readonly readyState: number;
        readonly url: string;
        readonly withCredentials: boolean;
        close(): void;
        readonly CLOSED: number;
        readonly CONNECTING: number;
        readonly OPEN: number;
        addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: (this: EventSource, event: MessageEvent<any>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof EventSourceEventMap>(type: K_1, listener: (this: EventSource, ev: EventSourceEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: (this: EventSource, event: MessageEvent<any>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        dispatchEvent(event: Event): boolean;
    };
    /**
     * Singleton constructor
     *
     * @public
     */
    make(options: Partial<Options> & {
        name: string;
        path: string;
    }): {
        /**
         * Registered listeners
         *
         * @public
         */
        listeners: Set<Listener>;
        options: Partial<Options> & {
            name: string;
            path: string;
        };
        /**
         * EventSource `onopen` handler
         * @public
         */
        onopen: () => void;
        /**
         * EventSource `onmessage` handler
         * @public
         */
        onmessage: (payload: MessageEvent) => Promise<void>;
        /**
         * EventSource `addMessageListener` handler
         * @public
         */
        addListener(listener: Listener): this;
        onerror: (this: EventSource, ev: Event) => any;
        readonly readyState: number;
        readonly url: string;
        readonly withCredentials: boolean;
        close(): void;
        readonly CLOSED: number;
        readonly CONNECTING: number;
        readonly OPEN: number;
        addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: (this: EventSource, event: MessageEvent<any>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof EventSourceEventMap>(type: K_1, listener: (this: EventSource, ev: EventSourceEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: (this: EventSource, event: MessageEvent<any>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        dispatchEvent(event: Event): boolean;
    };
};
//# sourceMappingURL=events.d.ts.map