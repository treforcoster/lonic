const ansiPattern = [
    `[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)`,
    `(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))`,
].join(`|`);
const stripAnsi = (body) => { var _a, _b; return (_b = (_a = body === null || body === void 0 ? void 0 : body.replace) === null || _a === void 0 ? void 0 : _a.call(body, new RegExp(ansiPattern, `g`), ``)) !== null && _b !== void 0 ? _b : body; };
/**
 * Overlay controller
 */
export class Controller {
    /**
     * Formatted error message
     */
    get message() {
        var _a;
        return (_a = this.payload.errors) === null || _a === void 0 ? void 0 : _a.reduce((a, c) => {
            var _a, _b;
            const msg = (_b = (_a = c === null || c === void 0 ? void 0 : c.message) !== null && _a !== void 0 ? _a : c === null || c === void 0 ? void 0 : c.error) !== null && _b !== void 0 ? _b : c;
            if (!msg)
                return a;
            return `${a}
        <div>
          <pre>${stripAnsi(msg)}</pre>
        </div>`;
        }, ``);
    }
    /**
     * Class constructor
     */
    constructor() {
        this.update = this.update.bind(this);
        this.element = document.createElement(`bud-error`);
    }
    /**
     * Append `bud-error` element to the DOM
     */
    createError() {
        var _a;
        !document.body.querySelector(`bud-error`) &&
            ((_a = document.body) === null || _a === void 0 ? void 0 : _a.appendChild(this.element));
    }
    /**
     * Remove `bud-error` element from the DOM (if present)
     */
    removeError() {
        var _a;
        (_a = document.body.querySelector(`bud-error`)) === null || _a === void 0 ? void 0 : _a.remove();
    }
    /**
     * Update DOM
     */
    update(payload) {
        var _a, _b;
        this.payload = payload;
        this.element.setAttribute(`message`, (_a = this.message) !== null && _a !== void 0 ? _a : ``);
        if (((_b = this.payload.errors) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            return this.createError();
        }
        this.removeError();
    }
}
