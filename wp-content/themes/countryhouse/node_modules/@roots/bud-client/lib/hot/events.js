/* eslint-disable no-console */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export const injectEvents = (eventSource) => {
    /**
     * EventSource wrapper
     *
     * @remarks
     * wraps EventSource in a function to allow for
     * mocking in tests
     */
    return class Events extends eventSource {
        /**
         * Class constructor
         *
         * @remarks
         * Singleton interface, so this is private.
         *
         * @public
         */
        constructor(options) {
            super(options.path);
            this.options = options;
            /**
             * Registered listeners
             *
             * @public
             */
            this.listeners = new Set();
            /**
             * EventSource `onopen` handler
             * @public
             */
            this.onopen = function () { };
            /**
             * EventSource `onmessage` handler
             * @public
             */
            this.onmessage = function (payload) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (!(payload === null || payload === void 0 ? void 0 : payload.data) || payload.data == `\uD83D\uDC93`) {
                        return;
                    }
                    try {
                        const data = JSON.parse(payload.data);
                        if (!data)
                            return;
                        yield Promise.all([...this.listeners].map((listener) => __awaiter(this, void 0, void 0, function* () {
                            return yield listener(data);
                        })));
                    }
                    catch (ex) { }
                });
            };
            this.onopen = this.onopen.bind(this);
            this.onmessage = this.onmessage.bind(this);
            this.addListener = this.addListener.bind(this);
        }
        /**
         * Singleton constructor
         *
         * @public
         */
        static make(options) {
            if (typeof window.bud.hmr[options.name] === `undefined`)
                Object.assign(window.bud.hmr, {
                    [options.name]: new Events(options),
                });
            return window.bud.hmr[options.name];
        }
        /**
         * EventSource `addMessageListener` handler
         * @public
         */
        addListener(listener) {
            this.listeners.add(listener);
            return this;
        }
    };
};
