/* eslint-disable no-console */
import { HotEventStream } from '@roots/bud-server/middleware/hot';
const middlewarePath = `/bud/hot`;
let latestStats = null;
let closed = false;
let logger;
export const factory = (app) => {
    logger = app.context.logger.scope(app.label, `hmr`);
    return makeHandler(app.compiler.instance);
};
export const makeHandler = (compiler) => {
    const stream = new HotEventStream();
    const onInvalid = () => {
        if (closed)
            return;
        stream.publish({ action: `building` });
    };
    const onDone = (stats) => {
        if (closed)
            return;
        latestStats = stats;
        publish(`built`, latestStats, stream);
    };
    compiler.hooks.invalid.tap(`bud-hot-middleware`, onInvalid);
    compiler.hooks.done.tap(`bud-hot-middleware`, onDone);
    const middleware = function (req, res, next) {
        if (closed)
            return next();
        if (!req.url.endsWith(middlewarePath))
            return next();
        stream.handle(req, res);
        if (latestStats) {
            publish(`sync`, latestStats, stream);
        }
    };
    // @ts-ignore
    middleware.publish = function (payload) {
        if (closed)
            return;
        stream.publish(payload);
    };
    // @ts-ignore
    middleware.close = function () {
        if (closed)
            return;
        closed = true;
        stream.close();
        // @ts-ignore https://github.com/webpack/tapable/issues/32#issuecomment-350644466
        stream = null;
    };
    return middleware;
};
export const publish = (action, statsCompilation, stream) => {
    const compilations = collectCompilations(statsCompilation.toJson({
        all: false,
        cached: true,
        children: true,
        modules: true,
        timings: true,
        hash: true,
        errors: true,
    }));
    compilations.forEach((stats) => {
        const name = stats.name ?? statsCompilation.name ?? `unnamed`;
        const modules = collectModules(stats.modules);
        logger.log(`built`, name, `(${stats.hash})`, `in`, `${stats.time}ms`);
        stream.publish({
            name,
            action,
            time: stats.time,
            hash: stats.hash,
            warnings: stats.warnings ?? [],
            errors: stats.errors ?? [],
            modules,
        });
    });
};
export const collectModules = (modules) => modules?.reduce((modules, module) => ({ ...modules, [module.id]: module.name }), {});
export const collectCompilations = (stats) => {
    let collection = [];
    // Stats has modules, single bundle
    if (stats.modules)
        collection.push(stats);
    // Stats has children, multiple bundles
    if (stats.children?.length)
        collection.push(...stats.children);
    // Not sure, assume single
    return collection;
};
//# sourceMappingURL=factory.js.map