import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import { BudError, ServerError } from '@roots/bud-support/errors';
/**
 * Node server
 *
 * @remarks
 * Base class. Extended by either `http` or `https` class.
 */
export class BaseServer {
    /**
     * Logger
     */
    get logger() {
        return this.app.context.logger.scope(`server`, this.constructor.name.toLowerCase());
    }
    /**
     * Options
     */
    get options() {
        return this.app.hooks.filter(`dev.options`, {});
    }
    /**
     * Constructor
     *
     * @param app - Bud
     */
    constructor(app) {
        this.app = app;
    }
    /**
     * Listen
     */
    async listen() {
        this.instance
            .listen(this.app.hooks.filter(`dev.listenOptions`, {
            host: this.app.server.url.hostname,
            port: Number(this.app.server.url.port),
        }))
            .on(`listening`, this.app.hooks.filter(`dev.onListening`, this.onListening))
            .on(`request`, this.app.hooks.filter(`dev.onRequest`, this.onRequest))
            .on(`error`, this.app.hooks.filter(`dev.onError`, this.onError));
    }
    /**
     * Server listen event
     */
    onListening(...param) {
        this.logger.info(`listening`, ...param);
    }
    /**
     * Server request event
     */
    async onRequest(request, response) {
        this.logger.log(`[${response.statusCode}]`, request.url, response.statusMessage ?? ``);
        return response;
    }
    /**
     * Server error event
     */
    onError(error) {
        const cause = BudError.normalize(error);
        throw new ServerError(cause.message, { cause });
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BaseServer.prototype, "listen", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], BaseServer.prototype, "onListening", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function, Function]),
    __metadata("design:returntype", Promise)
], BaseServer.prototype, "onRequest", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Error]),
    __metadata("design:returntype", void 0)
], BaseServer.prototype, "onError", null);
//# sourceMappingURL=base.js.map