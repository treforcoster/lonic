/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { IncomingMessage, Server as HttpServer, ServerResponse } from 'node:http';
import type { Server as HttpsServer } from 'node:https';
import type { Bud } from '@roots/bud-framework/bud';
import type { Server } from '@roots/bud-framework/services';
import type { Connection } from '@roots/bud-framework/services/server';
/**
 * Node server
 *
 * @remarks
 * Base class. Extended by either `http` or `https` class.
 */
export declare abstract class BaseServer implements Connection {
    app: Bud;
    /**
     * Create server
     *
     * @virtual
     */
    abstract createServer(app: any): Promise<HttpServer | HttpsServer>;
    /**
     * Server instance
     */
    instance: Connection['instance'];
    /**
     * Logger
     */
    get logger(): any;
    /**
     * Options
     */
    get options(): Server.Options;
    /**
     * Constructor
     *
     * @param app - Bud
     */
    constructor(app: Bud);
    /**
     * Listen
     */
    listen(): Promise<void>;
    /**
     * Server listen event
     */
    onListening(...param: any[]): void;
    /**
     * Server request event
     */
    onRequest(request: IncomingMessage, response: ServerResponse): Promise<ServerResponse<IncomingMessage>>;
    /**
     * Server error event
     */
    onError(error: Error): void;
}
//# sourceMappingURL=base.d.ts.map