import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, disabled, expose, label, options, } from '@roots/bud-framework/extension/decorators';
import isString from '@roots/bud-support/lodash/isString';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
/**
 * Http modules configuration
 */
let Cdn = class Cdn extends Extension {
    constructor() {
        super(...arguments);
        /**
         * CDN key to URL mapping
         */
        this.sources = new Map([
            [`gist`, `https://gist.githubusercontent.com/`],
            [`github`, `https://raw.githubusercontent.com/`],
            [`unpkg`, `https://unpkg.com/`],
            [`skypack`, `https://cdn.skypack.dev/`],
        ]);
        /**
         * Whether to cache modules locally
         */
        this.cacheEnabled = true;
    }
    /**
     * Disable local caching of modules
     */
    disableCache() {
        this.cacheEnabled = false;
        return this;
    }
    /**
     * Allowed URIs getter/setter
     */
    get allowedUris() {
        return this.getOption(`allowedUris`);
    }
    set allowedUris(value) {
        this.setOption(`allowedUris`, value);
    }
    /**
     * Cache location getter/setter
     */
    get cacheLocation() {
        return this.app.maybeCall(this.getOption(`cacheLocation`));
    }
    set cacheLocation(value) {
        this.setOption(`cacheLocation`, value);
    }
    /**
     * Frozen getter/setter
     */
    get frozen() {
        return this.app.maybeCall(this.getOption(`frozen`));
    }
    set frozen(value) {
        this.setOption(`frozen`, value);
    }
    /**
     * Lockfile location getter/setter
     */
    get lockfileLocation() {
        return this.getOption(`lockfileLocation`);
    }
    set lockfileLocation(value) {
        this.setOption(`lockfileLocation`, value);
    }
    /**
     * Proxy getter/setter
     */
    get proxy() {
        return this.app.maybeCall(this.getOption(`proxy`));
    }
    set proxy(value) {
        this.setOption(`proxy`, value);
    }
    /**
     * Upgrade location getter/setter
     */
    get upgrade() {
        return this.app.maybeCall(this.getOption(`upgrade`));
    }
    set upgrade(value) {
        this.setOption(`upgrade`, value);
    }
    /**
     * Set allowed URLs
     */
    setAllowedUris(value) {
        this.allowedUris = value;
        return this;
    }
    /**
     * Set cache location
     */
    setCacheLocation(value) {
        this.cacheLocation = value;
        return this;
    }
    /**
     * Freeze?
     */
    freeze(value) {
        this.frozen = !isUndefined(value) ? value : true;
        return this;
    }
    /**
     * Set lockfile location
     */
    setLockfileLocation(value) {
        this.lockfileLocation = value;
        return this;
    }
    /**
     * Set proxy location
     */
    setProxy(value) {
        this.proxy = value;
        return this;
    }
    /**
     * Set upgrade
     */
    setUpgrade(value) {
        this.upgrade = value;
        return this;
    }
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore(bud) {
        bud.hooks.on(`build.experiments`, experiments => ({
            ...(experiments ?? {}),
            buildHttp: {
                allowedUris: Array.from(this.allowedUris),
                cacheLocation: this.cacheEnabled ? this.cacheLocation : false,
                frozen: this.frozen,
                lockfileLocation: this.lockfileLocation,
                proxy: isString(this.proxy) ? this.proxy : undefined,
                upgrade: this.upgrade,
            },
        }));
        Object.entries(bud.build.rules).map(([key, rule]) => {
            if (key === `js` || key === `ts`)
                return;
            rule.setInclude([
                ...(!bud.build.rules[key].include
                    ? [bud.path()]
                    : Array.isArray(bud.build.rules[key].include)
                        ? bud.build.rules[key].include
                        : []),
                ...Array.from(this.allowedUris),
            ]);
        });
        const { NormalModuleReplacementPlugin } = await import(`webpack`).then(m => m.default);
        for (const [ident, url] of this.sources.entries()) {
            await bud.extensions.add({
                make: async () => new NormalModuleReplacementPlugin(new RegExp(`^${ident}:`), result => {
                    result.request = result.request.replace(`${ident}:`, url);
                }),
            });
            await Promise.all((bud.context.manifest?.bud?.imports?.[ident] ?? []).map(async ([signifier, remote]) => {
                await bud.extensions.add({
                    make: async () => new NormalModuleReplacementPlugin(new RegExp(`^${signifier}`), `${url}${remote}`),
                });
            }));
        }
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Cdn.prototype, "disableCache", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Set]),
    __metadata("design:returntype", Object)
], Cdn.prototype, "setAllowedUris", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Cdn.prototype, "setCacheLocation", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], Cdn.prototype, "freeze", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Cdn.prototype, "setLockfileLocation", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Cdn.prototype, "setProxy", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Cdn.prototype, "setUpgrade", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], Cdn.prototype, "buildBefore", null);
Cdn = __decorate([
    label(`@roots/bud-extensions/cdn`),
    expose(`cdn`),
    options({
        allowedUris: new Set([/^http:\/\//, /^https:\/\//]),
        cacheLocation: (app) => app.path(`@storage`, app.label, `modules`),
        frozen: false,
        lockfileLocation: (app) => app.path(`bud.lock`),
        proxy: ({ env }) => env.isString(`HTTP_PROXY`) && env.get(`HTTP_PROXY`),
        upgrade: true,
    }),
    disabled
], Cdn);
export default Cdn;
//# sourceMappingURL=index.js.map