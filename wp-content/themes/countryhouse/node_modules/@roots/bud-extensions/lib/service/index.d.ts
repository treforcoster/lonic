import type { Bud, Modules } from '@roots/bud-framework';
import { ApplyPlugin, Extension } from '@roots/bud-framework/extension';
import { Service } from '@roots/bud-framework/service';
import type { Extensions as Contract } from '@roots/bud-framework/services';
import Container from '@roots/container';
/**
 * Extensions Service
 */
export default class Extensions extends Service implements Contract.Service {
    /**
     * Registered extensions
     */
    repository: Modules;
    /**
     * Resolved options
     */
    options: Container<{
        allowlist: Array<string>;
        denylist: Array<string>;
        discover: boolean;
    }>;
    /**
  -   * Modules on which an import attempt was made and failed
  -   *
  -   * @remarks
  -   * This doesn't mean an error, per se. This should only
  -   * be used in the context of trying to import `optionalDependencies`
  -   * of a given extension module.
  -   *
  -   * @public
  -   */
    unresolvable: Set<string>;
    constructor(bud: () => Bud);
    /**
     * `register` callback
     *
     * @todo
     * All this is doing is helping transition people to using `bud.extensions` key for
     * `allowList` and `denyList`. It can be removed in a future release. (2022-10-18)
     */
    register?(bud: Bud): Promise<void>;
    /**
     * `booted` callback
     */
    booted?(bud: Bud): Promise<void>;
    /**
     * `configAfter` callback
     */
    configAfter?(): Promise<void>;
    /**
     * {@link Extension.buildBefore}
     */
    buildBefore?(): Promise<void>;
    /**
     * {@link Extension.buildBefore}
     */
    buildAfter?(): Promise<void>;
    /**
     * Has extension
     */
    has(key: string): key is keyof Modules;
    /**
     * Get extension
     */
    get<K extends `${keyof Modules & string}`>(key: K): Modules[K];
    /**
     * Remove extension
     */
    remove<K extends `${keyof Modules & string}`>(key: K): this;
    /**
     * Set extension
     */
    set(value: Extension): this;
    /**
     * Instantiate a Framework extension class or object
     */
    instantiate(source: (new (...args: any[]) => Extension) | Extension | {
        apply: (...args: any[]) => any;
    }): Promise<Extension>;
    isAllowed(signifier: string): boolean;
    /**
     * Import an extension
     */
    import(signifier: string, fatalOnError?: boolean | number): Promise<Extension>;
    /**
     * Add a {@link Extension} to the extensions repository
     */
    add<K extends `${keyof Modules & string}`>(extension: Partial<Extension> | (new (bud: Bud) => Partial<Extension>) | K | Array<Partial<Extension> | (new (bud: Bud) => Partial<Extension>) | K>): Promise<void>;
    /**
     * Run an extension lifecycle method
     *
     * @remarks
     * - `_register`
     * - `_boot`
     * - `_buildBefore`
     * - `_make`
     */
    run(extension: Extension, methodName: Contract.LifecycleMethods): Promise<this>;
    /**
     * Execute a extension lifecycle method on all registered extensions
     */
    runAll(methodName: Contract.LifecycleMethods): Promise<any>;
    /**
     * Run a lifecycle method for an extension's dependencies
     *
     * @remarks
     * Called from {@link Extension.run}. Ensures a method is run for an
     * extension's dependencies before it is run for the extension itself.
     */
    runDependencies<K extends `${keyof Modules & string}`>(extension: Extension | K, methodName: Contract.LifecycleMethods): Promise<void>;
    /**
     * Returns an array of plugin instances which have been registered to the
     * container and are set to be used in the compilation
     *
     * @returns An array of plugin instances
     */
    make(): Promise<ApplyPlugin[]>;
}
//# sourceMappingURL=index.d.ts.map